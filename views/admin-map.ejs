<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <title>Map Monitoring - Admin</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="/css/responsive-admin.css" rel="stylesheet">
    <link href="/css/dark-theme.css" rel="stylesheet">
    <link href="/css/widgets.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <style>
        body {
            overflow-x: hidden;
        }

        /* Map Container */
        .map-container {
            height: calc(100vh - 76px);
            position: relative;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            margin: 1rem 0;
        }

        #map {
            height: 100%;
            width: 100%;
            z-index: 1;
        }

        /* Control Panel */
        .control-panel {
            /* Removed absolute positioning to prevent covering summary cards */
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            box-shadow: 0 15px 50px rgba(0,0,0,0.2);
            z-index: 1000;
            max-height: calc(100vh - 140px);
            overflow-y: auto;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        /* Control Panel Toggle States */
        .control-panel.collapsed {
            transform: translateX(-100%);
            opacity: 0.8;
        }

        .control-panel.collapsed .card-body {
            display: none;
        }

        .control-panel.collapsed .card-header {
            border-radius: 15px;
        }

        .control-panel.collapsed #toggleControlPanel i {
            transform: rotate(180deg);
        }

        /* Toggle button animation */
        #toggleControlPanel {
            transition: all 0.3s ease;
        }

        #toggleControlPanel:hover {
            background-color: rgba(255, 255, 255, 0.2) !important;
        }

        .control-panel .card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 15px 15px 0 0 !important;
            border: none;
            font-weight: 600;
            font-size: 14px;
        }

        .control-panel .card-body {
            padding: 1rem;
        }

        /* Filter Controls */
        .filter-control {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
        }

        .filter-control.active {
            background: #e3f2fd;
            border-color: #2196f3;
        }

        /* Device List */
        .device-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .device-item {
            padding: 0.5rem;
            margin-bottom: 0.25rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid transparent;
        }

        .device-item:hover {
            background: #f8f9fa;
            border-color: #dee2e6;
        }

        .device-item.active {
            background: #e3f2fd;
            border-color: #2196f3;
        }

        .device-status {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 6px;
        }

        .status-online {
            background-color: #4caf50;
            box-shadow: 0 0 6px rgba(76, 175, 80, 0.5);
        }

        .status-offline {
            background-color: #d32f2f;
            box-shadow: 0 0 8px rgba(211, 47, 47, 0.7);
            border: 2px solid #ffffff;
        }

        /* Custom Leaflet */
        .custom-marker {
            background: transparent !important;
            border: none !important;
        }

        .marker-online {
            background-color: #28a745 !important;
            width: 24px !important;
            height: 24px !important;
            border-radius: 50% !important;
            border: 3px solid white !important;
            box-shadow: 0 3px 12px rgba(40, 167, 69, 0.4) !important;
            position: relative !important;
        }

        .marker-online::after {
            content: '';
            position: absolute;
            top: 3px;
            left: 3px;
            width: 12px;
            height: 12px;
            background: white;
            border-radius: 50%;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.2);
        }

        .marker-offline {
            background-color: #dc3545 !important;
            width: 24px !important;
            height: 24px !important;
            border-radius: 50% !important;
            border: 3px solid white !important;
            box-shadow: 0 3px 12px rgba(220, 53, 69, 0.4) !important;
            position: relative !important;
        }

        .marker-offline::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 8px;
            height: 2px;
            background: white;
            border-radius: 1px;
        }

        /* OLT Marker Styles */
        .custom-olt-marker {
            background: transparent !important;
            border: none !important;
        }

        .olt-popup-container .leaflet-popup-content-wrapper {
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.2);
        }

        .olt-popup h6 {
            color: #667eea;
            font-weight: 600;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 0.5rem;
        }

        .marker-no-location {
            background: linear-gradient(135deg, #6c757d, #495057) !important;
            width: 20px !important;
            height: 20px !important;
            border-radius: 6px !important;
            border: 2px solid white !important;
            box-shadow: 0 3px 12px rgba(108, 117, 125, 0.4) !important;
            position: relative !important;
        }

        .marker-no-location::after {
            content: '?';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-weight: bold;
            font-size: 12px;
        }

        /* Improved ODP Marker Styles */
        .odp-marker {
            width: 24px;
            height: 24px;
            border-radius: 4px;
            background: linear-gradient(135deg, #ff9800, #f57c00);
            border: 2px solid white;
            box-shadow: 0 2px 6px rgba(255, 152, 0, 0.4);
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .odp-marker::before {
            font-family: "bootstrap-icons";
            content: "\F4E4"; /* bi-hdd-network icon - perfect for ODP */
            font-size: 14px;
            color: white;
            font-weight: normal;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        }

        .odp-marker:hover {
            transform: scale(1.15);
            box-shadow: 0 3px 10px rgba(255, 152, 0, 0.6);
        }

        /* ODP Marker Animation - subtle */
        .odp-marker {
            animation: odp-glow 4s ease-in-out infinite;
        }

        @keyframes odp-glow {
            0%, 100% {
                box-shadow: 0 2px 6px rgba(255, 152, 0, 0.4);
            }
            50% {
                box-shadow: 0 2px 10px rgba(255, 152, 0, 0.6);
            }
        }

        /* Enhanced ONU Marker Styles - Modern Pin Style */
        .onu-marker {
            width: 44px;
            height: 54px;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            filter: drop-shadow(0 4px 10px rgba(0, 0, 0, 0.3));
        }

        /* Pin background shape */
        .onu-marker::after {
            content: '';
            position: absolute;
            width: 44px;
            height: 44px;
            border-radius: 50% 50% 50% 0;
            transform: rotate(-45deg);
            top: 0;
            left: 0;
            z-index: 1;
        }

        .onu-marker.online::after {
            background: linear-gradient(135deg, #34A853 0%, #0F9D58 100%);
        }

        .onu-marker.offline::after {
            background: linear-gradient(135deg, #EA4335 0%, #D33B2C 100%);
        }

        /* White circle in center for icon */
        .onu-marker .icon-circle {
            position: absolute;
            width: 28px;
            height: 28px;
            background: white;
            border-radius: 50%;
            top: 8px;
            left: 8px;
            z-index: 2;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .onu-marker .icon-circle::before {
            font-family: "bootstrap-icons";
            font-size: 18px;
            font-weight: bold;
            line-height: 1;
            content: "\F619"; /* bi-router-fill icon */
        }

        .onu-marker.online .icon-circle::before {
            color: #0F9D58;
        }

        .onu-marker.offline .icon-circle::before {
            color: #D33B2C;
        }

        .onu-marker:hover {
            transform: scale(1.15);
            filter: drop-shadow(0 6px 15px rgba(0, 0, 0, 0.4));
            z-index: 1000;
        }

        .onu-marker.cluster {
            width: 50px;
            height: 60px;
        }

        .onu-marker.cluster::after {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #4285F4 0%, #1967D2 100%) !important;
        }

        .onu-marker.cluster .icon-circle {
            width: 32px;
            height: 32px;
            top: 9px;
            left: 9px;
        }

        .onu-marker.cluster .icon-circle::before {
            color: #1967D2;
            font-size: 20px;
        }

        .onu-marker.cluster .cluster-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff5722;
            color: white;
            border-radius: 50%;
            width: 22px;
            height: 22px;
            font-size: 11px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
            font-weight: bold;
            z-index: 10;
            border: 2px solid white;
        }
        
        /* Pulse animation for online devices */
        .onu-marker.online.pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 4px 15px rgba(76, 175, 80, 0.4);
            }
            50% {
                box-shadow: 0 4px 25px rgba(76, 175, 80, 0.8);
            }
            100% {
                box-shadow: 0 4px 15px rgba(76, 175, 80, 0.4);
            }
        }

        /* Cable styles for better visibility */
        .odp-cable {
            filter: drop-shadow(0 0 3px rgba(255, 107, 0, 0.8));
        }

        .onu-cable {
            filter: drop-shadow(0 0 2px rgba(33, 150, 243, 0.6));
        }
        
        /* Popup Edit Section Styles */
        .popup-edit-section {
            margin-top: 10px;
            padding: 8px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
        
        .popup-edit-section label {
            font-weight: 600;
            display: block;
            margin-bottom: 4px;
        }
        
        .popup-edit-section input {
            flex: 1;
            padding: 4px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 12px;
        }
        
        .popup-edit-section button {
            padding: 4px 8px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            color: white;
        }
        
        .popup-edit-section .ssid-button {
            background-color: #007bff;
        }
        
        .popup-edit-section .password-button {
            background-color: #28a745;
        }
        
        .popup-edit-section button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .popup-edit-section .input-group {
            display: flex;
            gap: 4px;
            margin-bottom: 8px;
        }

        /* Loading Overlay */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 999;
        }


        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
            font-size: 14px;
        }

        .legend-item:last-child {
            margin-bottom: 0;
        }

        /* Responsive breakpoints for control panel */
        @media (max-width: 768px) {
            .control-panel {
                margin: 0 0 1rem 0;
                max-height: 400px; /* Increased for mobile */
            }

            .map-container {
                height: 70vh; /* Better mobile height */
                min-height: 400px;
            }

            
            /* Mobile-specific stats card adjustments */
            .stats-card {
                padding: 1rem;
                margin-bottom: 0.75rem;
            }
            
            .stats-card .fs-4 {
                font-size: 1.5rem !important;
            }
            
            .stats-card .fs-2 {
                font-size: 1.5rem !important;
            }
            
            /* Mobile header adjustments */
            .main-content {
                padding: 15px;
                margin-top: 60px; /* Space for mobile navbar */
            }
            
            /* Mobile button adjustments */
            .btn-filter {
                font-size: 11px;
                padding: 0.375rem 0.5rem;
                margin: 0.125rem;
            }
            
            /* Touch-friendly device list */
            .device-item {
                padding: 0.75rem;
                margin-bottom: 0.5rem;
                font-size: 14px;
            }
            
            /* Search input mobile optimization */
            .search-input {
                font-size: 16px; /* Prevent zoom on iOS */
            }
        }
        
        /* Extra small devices (phones) */
        @media (max-width: 576px) {
            .main-content {
                padding: 10px;
            }
            
            .stats-card {
                padding: 0.75rem;
            }
            
            .map-container {
                height: 60vh;
                min-height: 350px;
            }
            
            .control-panel {
                max-height: 350px;
            }
            
            /* Compact header for very small screens */
            .h3 {
                font-size: 1.5rem;
            }
            
            /* Smaller buttons on very small screens */
            .btn {
                padding: 0.5rem 0.75rem;
                font-size: 14px;
            }
        }

        /* Search Input */
        .search-input {
            border-radius: 20px;
            border: 1px solid #dee2e6;
            padding: 0.5rem 1rem;
            font-size: 14px;
        }

        .search-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        /* Button Styles */
        .btn-filter {
            border-radius: 20px;
            font-size: 12px;
            padding: 0.375rem 0.75rem;
            margin: 0.125rem;
            transition: all 0.2s ease;
            border: 1px solid #dee2e6;
            background: white;
        }

        .btn-filter:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .btn-filter.active {
            background: #667eea;
            border-color: #667eea;
            color: white;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .btn-filter.active:hover {
            background: #5a67d8;
            border-color: #5a67d8;
        }

        /* Quick Stats now use global styles from /css/widgets.css */

        /* Enhanced Device List */
        .device-list {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            background: #f8f9fa;
        }

        .device-item {
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .device-item:hover {
            background: #e9ecef;
            border-left: 3px solid #667eea;
        }

        .device-item.active {
            background: #e7f3ff;
            border-left: 3px solid #667eea;
        }

        /* Loading States */
        .loading-overlay {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(5px);
        }

        /* Search Input Enhancement */
        .input-group .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .input-group .btn {
            border-left: none;
        }

        .input-group .btn:focus {
            border-color: #667eea;
        }

        /* Control Panel Enhancements */
        .control-panel {
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .control-panel .card-header {
            font-weight: 600;
            letter-spacing: 0.5px;
        }



        /* Additional responsive improvements */
        @media (max-width: 991.98px) {
            /* Tablet adjustments */
            .control-panel {
                margin-bottom: 1.5rem;
            }
            
            .map-container {
                height: 65vh;
                min-height: 450px;
            }
            
            /* Better tablet header */
            .main-content {
                padding: 20px 15px;
            }
        }
        
        @media (max-width: 767.98px) {
            /* Mobile adjustments */
            .device-item {
                padding: 0.75rem;
                border-radius: 8px;
            }

            .btn-filter {
                font-size: 12px;
                padding: 0.375rem 0.75rem;
                border-radius: 6px;
            }
            
            /* Improve touch targets */
            .btn {
                min-height: 44px; /* Minimum touch target size */
            }
            
            /* Better spacing for mobile */
            .mb-3 {
                margin-bottom: 1rem !important;
            }
            
            .mb-4 {
                margin-bottom: 1.5rem !important;
            }
            
            /* Mobile header optimizations */
            .h3 {
                font-size: 1.5rem !important;
            }
            
            /* Responsive control panel header */
            .control-panel .card-header {
                padding: 1rem;
                font-size: 13px;
            }
            
            .control-panel .card-header .btn-sm {
                padding: 0.25rem 0.5rem;
                font-size: 12px;
            }
        }
        
        /* Extra mobile optimizations */
        @media (max-width: 480px) {
            /* Very small screens */
            .stats-card {
                padding: 0.75rem !important;
            }
            
            .stats-card .fs-4 {
                font-size: 1.25rem !important;
            }
            
            
            .device-item {
                font-size: 13px;
            }
        }
    </style>
</head>
<body>
<div class="container-fluid">
    <div class="row">
        <!-- Include Responsive Admin Sidebar -->
        <%- include('partials/admin-responsive-sidebar', { page: 'map', settings: settings }) %>

        <main class="col-12 col-md-9 col-lg-10 ms-sm-auto main-content">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-1 d-flex align-items-center">
                        <i class="bi bi-geo-alt-fill text-primary me-3 fs-2"></i>
                        <div>
                            <div class="fw-bold">Map Monitoring</div>
                            <small class="text-muted">Monitoring lokasi semua perangkat ONU</small>
                        </div>
                    </h1>
                </div>
                <div class="d-flex gap-2">
                    <button id="refreshBtn" class="btn btn-primary d-flex align-items-center">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh Data
                    </button>
                    <button id="markOdpBtn" class="btn btn-outline-primary d-flex align-items-center" title="Mode Tandai ODP">
                        <i class="bi bi-bezier me-2"></i>Tandai ODP
                    </button>
                    <button id="linkOnuBtn" class="btn btn-outline-success d-flex align-items-center" title="Hubungkan ONU ke ODP">
                        <i class="bi bi-plug me-2"></i>Link ONU→ODP
                    </button>
                    <button id="linkOdpBtn" class="btn btn-outline-warning d-flex align-items-center" title="Hubungkan ODP ke ODP">
                        <i class="bi bi-link-45deg me-2"></i>Link ODP↔ODP
                    </button>
                </div>
            </div>

            <!-- Statistics Cards (match dashboard widget style) -->
            <div class="row widget-row mb-4">
                <div class="col-6 col-sm-6 col-md-3 mb-3">
                    <div class="widget-card">
                        <div>
                            <i class="bi bi-hdd-network widget-icon"></i>
                            <div class="widget-label">Total ONU</div>
                        </div>
                        <div>
                            <div class="widget-value" id="totalDevices"><%= genieacsTotal || 0 %></div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 mb-3">
                    <div class="widget-card success">
                        <div>
                            <i class="bi bi-wifi widget-icon"></i>
                            <div class="widget-label">Online</div>
                        </div>
                        <div>
                            <div class="widget-value" id="onlineDevices"><%= genieacsOnline || 0 %></div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 mb-3">
                    <div class="widget-card danger">
                        <div>
                            <i class="bi bi-wifi-off widget-icon"></i>
                            <div class="widget-label">Offline</div>
                        </div>
                        <div>
                            <div class="widget-value" id="offlineDevices"><%= genieacsOffline || 0 %></div>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-sm-6 col-md-3 mb-3">
                    <div class="widget-card warning">
                        <div>
                            <i class="bi bi-geo-alt-fill widget-icon"></i>
                            <div class="widget-label">Dengan Lokasi</div>
                        </div>
                        <div>
                            <div class="widget-value" id="locatedDevices"><%= totalWithLocation || 0 %></div>
                        </div>
                    </div>
                </div>

            <!-- Map and Controls Row -->
            <div class="row">
                        <!-- Control Panel -->
                <div class="col-12 col-lg-4 mb-4" id="controlPanelContainer" style="display: none;">
                    <div class="control-panel card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <i class="bi bi-sliders me-2"></i>
                                <span class="fw-bold">Monitoring Control</span>
                                <br>
                                <small class="text-white-50">Kontrol peta & filter device</small>
                            </div>
                            <div class="d-flex gap-1">
                                <button id="refreshDataBtn" class="btn btn-sm btn-outline-light d-flex align-items-center" title="Refresh Data">
                                    <i class="bi bi-arrow-clockwise me-1"></i>
                                    <span class="d-none d-lg-inline">Refresh</span>
                                </button>
                                <button id="toggleControlPanel" class="btn btn-sm btn-outline-light" title="Toggle Panel">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <!-- Quick Stats -->
                            <div class="mb-3">
                                <label class="form-label fw-bold mb-2">Ringkasan Cepat</label>
                                <div class="row g-2">
                                    <div class="col-6">
                                        <div class="text-center p-2 bg-light rounded">
                                            <div class="fs-5 fw-bold text-primary" id="quickTotal">-</div>
                                            <small class="text-muted">Total</small>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="text-center p-2 bg-success text-white rounded">
                                            <div class="fs-5 fw-bold" id="quickOnline">-</div>
                                            <small>Online</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Layer Quick Switch -->
                            <div class="mb-3">
                                <label class="form-label fw-bold">🗺️ Layer Peta</label>
                                <div class="d-grid gap-2">
                                    <button id="switchToSatellite" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-satellite me-1"></i>Satelit Esri
                                    </button>
                <button id="switchToGoogleSat" class="btn btn-outline-success btn-sm">
                    <i class="bi bi-satellite-fill me-1"></i>Google Satelit
                </button>
                <button id="switchToGoogleHybrid" class="btn btn-outline-success btn-sm">
                    <i class="bi bi-globe me-1"></i>Hybrid Google
                </button>
                <button id="switchToBingSat" class="btn btn-outline-danger btn-sm">
                    <i class="bi bi-satellite me-1"></i>Satelit Bing
                </button>
                <button id="switchToCartoDb" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-globe me-1"></i>CartoDB
                </button>
                <button id="switchToOSM" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-map me-1"></i>OpenStreetMap
                </button>
                <button id="switchToCartoDark" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-moon me-1"></i>CartoDB Dark
                </button>
                <button id="switchToCartoPositron" class="btn btn-outline-light btn-sm">
                    <i class="bi bi-sun me-1"></i>CartoDB Positron
                </button>
                <button id="switchToCartoVoyager" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-compass me-1"></i>CartoDB Voyager
                </button>
                <button id="switchToCartoMatter" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-circle me-1"></i>CartoDB Matter
                </button>
                <button id="switchToCartoAntique" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-book me-1"></i>CartoDB Antique
                </button>
                <button id="switchToCartoEco" class="btn btn-outline-success btn-sm">
                    <i class="bi bi-tree me-1"></i>CartoDB Eco
                </button>
                <button id="switchToCartoMidnight" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-moon-stars me-1"></i>CartoDB Midnight
                </button>
                <button id="switchToCartoFlatBlue" class="btn btn-outline-info btn-sm">
                    <i class="bi bi-droplet me-1"></i>CartoDB Flat Blue
                </button>
                <button id="switchToCartoFlatPurple" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-palette me-1"></i>CartoDB Flat Purple
                </button>
                <button id="switchToCartoFlatGreen" class="btn btn-outline-success btn-sm">
                    <i class="bi bi-flower1 me-1"></i>CartoDB Flat Green
                </button>
                <button id="switchToCartoFlatRed" class="btn btn-outline-danger btn-sm">
                    <i class="bi bi-heart me-1"></i>CartoDB Flat Red
                </button>
                <button id="switchToCartoFlatOrange" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-sun me-1"></i>CartoDB Flat Orange
                </button>
                <button id="switchToCartoFlatYellow" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-star me-1"></i>CartoDB Flat Yellow
                </button>
                <button id="switchToTopo" class="btn btn-outline-info btn-sm">
                    <i class="bi bi-mountain me-1"></i>Topografi
                </button>
                <button id="switchToNormal" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-map me-1"></i>Normal
                </button>
                <button id="switchToOSM" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-map me-1"></i>OpenStreetMap
                </button>
                <button id="switchToCartoDark" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-moon me-1"></i>CartoDB Dark
                </button>
                <button id="switchToCartoPositron" class="btn btn-outline-light btn-sm">
                    <i class="bi bi-sun me-1"></i>CartoDB Positron
                </button>
                <button id="switchToCartoVoyager" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-compass me-1"></i>CartoDB Voyager
                </button>
                <button id="switchToCartoMatter" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-circle me-1"></i>CartoDB Matter
                </button>
                <button id="switchToCartoAntique" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-book me-1"></i>CartoDB Antique
                </button>
                <button id="switchToCartoEco" class="btn btn-outline-success btn-sm">
                    <i class="bi bi-tree me-1"></i>CartoDB Eco
                </button>
                <button id="switchToCartoMidnight" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-moon-stars me-1"></i>CartoDB Midnight
                </button>
                <button id="switchToCartoFlatBlue" class="btn btn-outline-info btn-sm">
                    <i class="bi bi-droplet me-1"></i>CartoDB Flat Blue
                </button>
                <button id="switchToCartoFlatPurple" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-palette me-1"></i>CartoDB Flat Purple
                </button>
                <button id="switchToCartoFlatGreen" class="btn btn-outline-success btn-sm">
                    <i class="bi bi-flower1 me-1"></i>CartoDB Flat Green
                </button>
                <button id="switchToCartoFlatRed" class="btn btn-outline-danger btn-sm">
                    <i class="bi bi-heart me-1"></i>CartoDB Flat Red
                </button>
                <button id="switchToCartoFlatOrange" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-sun me-1"></i>CartoDB Flat Orange
                </button>
                <button id="switchToCartoFlatYellow" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-star me-1"></i>CartoDB Flat Yellow
                </button>
                <button id="switchToTopo" class="btn btn-outline-info btn-sm">
                    <i class="bi bi-mountain me-1"></i>Topografi
                </button>
                <button id="switchToNormal" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-map me-1"></i>Normal
                </button>
                <button id="switchToOSM" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-map me-1"></i>OpenStreetMap
                </button>
                <button id="switchToCartoDark" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-moon me-1"></i>CartoDB Dark
                </button>
                <button id="switchToCartoPositron" class="btn btn-outline-light btn-sm">
                    <i class="bi bi-sun me-1"></i>CartoDB Positron
                </button>
                <button id="switchToCartoVoyager" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-compass me-1"></i>CartoDB Voyager
                </button>
                <button id="switchToCartoMatter" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-circle me-1"></i>CartoDB Matter
                </button>
                <button id="switchToCartoAntique" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-book me-1"></i>CartoDB Antique
                </button>
                <button id="switchToCartoEco" class="btn btn-outline-success btn-sm">
                    <i class="bi bi-tree me-1"></i>CartoDB Eco
                </button>
                <button id="switchToCartoMidnight" class="btn btn-outline-dark btn-sm">
                    <i class="bi bi-moon-stars me-1"></i>CartoDB Midnight
                </button>
                <button id="switchToCartoFlatBlue" class="btn btn-outline-info btn-sm">
                    <i class="bi bi-droplet me-1"></i>CartoDB Flat Blue
                </button>
                <button id="switchToCartoFlatPurple" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-palette me-1"></i>CartoDB Flat Purple
                </button>
                <button id="switchToCartoFlatGreen" class="btn btn-outline-success btn-sm">
                    <i class="bi bi-flower1 me-1"></i>CartoDB Flat Green
                </button>
                <button id="switchToCartoFlatRed" class="btn btn-outline-danger btn-sm">
                    <i class="bi bi-heart me-1"></i>CartoDB Flat Red
                </button>
                <button id="switchToCartoFlatOrange" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-sun me-1"></i>CartoDB Flat Orange
                </button>
                <button id="switchToCartoFlatYellow" class="btn btn-outline-warning btn-sm">
                    <i class="bi bi-star me-1"></i>CartoDB Flat Yellow
                </button>
                <button id="switchToTopo" class="btn btn-outline-info btn-sm">
                    <i class="bi bi-mountain me-1"></i>Topografi
                </button>
                <button id="switchToNormal" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-map me-1"></i>Normal
                </button>
                                    <button id="switchToStamenSat" class="btn btn-outline-warning btn-sm">
                                        <i class="bi bi-globe me-1"></i>Stamen Satelit
                                    </button>
                                    <button id="switchToMapboxSat" class="btn btn-outline-info btn-sm">
                                        <i class="bi bi-geo-alt me-1"></i>Mapbox Satelit
                                    </button>
                                    <button id="switchToOSM" class="btn btn-outline-dark btn-sm">
                                        <i class="bi bi-map me-1"></i>OpenStreetMap
                                    </button>
                                    <button id="switchToCartoDark" class="btn btn-outline-dark btn-sm">
                                        <i class="bi bi-moon me-1"></i>CartoDB Dark
                                    </button>
                                    <button id="switchToCartoPositron" class="btn btn-outline-light btn-sm">
                                        <i class="bi bi-sun me-1"></i>CartoDB Positron
                                    </button>
                                    <button id="switchToCartoVoyager" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-compass me-1"></i>CartoDB Voyager
                                    </button>
                                    <button id="switchToCartoMatter" class="btn btn-outline-secondary btn-sm">
                                        <i class="bi bi-circle me-1"></i>CartoDB Matter
                                    </button>
                                    <button id="switchToCartoAntique" class="btn btn-outline-warning btn-sm">
                                        <i class="bi bi-book me-1"></i>CartoDB Antique
                                    </button>
                                    <button id="switchToCartoEco" class="btn btn-outline-success btn-sm">
                                        <i class="bi bi-tree me-1"></i>CartoDB Eco
                                    </button>
                                    <button id="switchToCartoMidnight" class="btn btn-outline-dark btn-sm">
                                        <i class="bi bi-moon-stars me-1"></i>CartoDB Midnight
                                    </button>
                                    <button id="switchToCartoFlatBlue" class="btn btn-outline-info btn-sm">
                                        <i class="bi bi-droplet me-1"></i>CartoDB Flat Blue
                                    </button>
                                    <button id="switchToCartoFlatPurple" class="btn btn-outline-warning btn-sm">
                                        <i class="bi bi-palette me-1"></i>CartoDB Flat Purple
                                    </button>
                                    <button id="switchToCartoFlatGreen" class="btn btn-outline-success btn-sm">
                                        <i class="bi bi-flower1 me-1"></i>CartoDB Flat Green
                                    </button>
                                    <button id="switchToCartoFlatRed" class="btn btn-outline-danger btn-sm">
                                        <i class="bi bi-heart me-1"></i>CartoDB Flat Red
                                    </button>
                                    <button id="switchToCartoFlatOrange" class="btn btn-outline-warning btn-sm">
                                        <i class="bi bi-sun me-1"></i>CartoDB Flat Orange
                                    </button>
                                    <button id="switchToCartoFlatYellow" class="btn btn-outline-warning btn-sm">
                                        <i class="bi bi-star me-1"></i>CartoDB Flat Yellow
                                    </button>
                <button id="switchToNormal" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-map me-1"></i>Normal
                </button>
                <button id="switchToTopo" class="btn btn-outline-info btn-sm">
                    <i class="bi bi-mountain me-1"></i>Topografi
                </button>
                                </div>
                                <small class="text-muted">Atau gunakan layer control di pojok kanan atas</small>
                            </div>

                            <!-- Search -->
                            <div class="mb-3">
                                <label class="form-label fw-bold">🔍 Cari Perangkat</label>
                                <div class="input-group">
                                    <input type="text" id="searchInput" class="form-control search-input"
                                           placeholder="Serial Number, PPPoE, atau Telepon...">
                                    <button class="btn btn-outline-secondary" type="button" id="clearSearchBtn">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Filters -->
                            <div class="mb-3">
                                <label class="form-label fw-bold">🎯 Filter Status</label>
                                <div class="row g-1">
                                    <div class="col-6">
                                        <button class="btn btn-filter w-100 active" data-filter="all">
                                            <i class="bi bi-grid-fill me-1"></i>Semua
                                        </button>
                                    </div>
                                    <div class="col-6">
                                        <button class="btn btn-filter w-100" data-filter="online">
                                            <i class="bi bi-wifi me-1"></i>Online
                                        </button>
                                    </div>
                                    <div class="col-6">
                                        <button class="btn btn-filter w-100" data-filter="offline">
                                            <i class="bi bi-wifi-off me-1"></i>Offline
                                        </button>
                                    </div>
                                    <div class="col-6">
                                        <button class="btn btn-filter w-100" data-filter="with-location">
                                            <i class="bi bi-geo-alt-fill me-1"></i>Dengan Lokasi
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Device List -->
                            <div class="mb-0">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label class="form-label fw-bold mb-0">
                                        📋 Daftar Perangkat
                                    </label>
                                    <small class="text-muted" id="deviceCountSmall">(0)</small>
                                </div>
                                <div class="device-list border rounded p-2" id="deviceList">
                                    <div class="text-center text-muted py-4" id="loadingIndicator">
                                        <div class="spinner-border spinner-border-sm me-2" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <div class="d-inline">Memuat data perangkat...</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Map Container -->
                <div class="col-12" id="mapContainer">
                    <div class="map-container">
                        <div id="map"></div>

                        <!-- Loading Overlay -->
                        <div class="loading-overlay" id="loadingOverlay">
                            <div class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <div class="mt-2">Memuat peta monitoring...</div>
                            </div>
                        </div>
                        
                        <!-- Toggle Button for Control Panel -->
                        <button id="showControlPanelBtn" class="btn btn-primary position-absolute" 
                                style="top: 10px; left: 10px; z-index: 1000; display: none;"
                                title="Show Control Panel">
                            <i class="bi bi-sliders"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Legend -->
            <div class="row mt-3">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="mb-3 fw-bold d-flex align-items-center">
                                <i class="bi bi-info-circle me-2"></i>Legenda
                            </h6>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="legend-item d-flex align-items-center mb-2">
                                        <span class="device-status status-online me-2"></span>
                                        <div>
                                            <div class="fw-bold small">Online</div>
                                            <small class="text-muted">Device aktif</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="legend-item d-flex align-items-center mb-2">
                                        <span class="device-status status-offline me-2"></span>
                                        <div>
                                            <div class="fw-bold small">Offline</div>
                                            <small class="text-muted">Device tidak aktif</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="legend-item d-flex align-items-center mb-2">
                                        <span class="device-status me-2" style="width: 12px; height: 12px; background: linear-gradient(135deg, #6c757d, #495057); border-radius: 4px;"></span>
                                        <div>
                                            <div class="fw-bold small">Tanpa Lokasi</div>
                                            <small class="text-muted">Belum diset lokasi</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <hr class="my-3">
                            <div class="legend-item d-flex align-items-center mb-2">
                                <div class="me-2" style="width: 20px; height: 3px; background: #2196f3; border-radius: 2px;"></div>
                                <div>
                                    <div class="fw-bold small">Kabel ONU-ODP</div>
                                    <small class="text-muted">Sambungan ke pelanggan</small>
                                </div>
                            </div>
                            <div class="legend-item d-flex align-items-center mb-3">
                                <div class="me-2" style="width: 20px; height: 3px; background: #ff9800; border-radius: 2px;"></div>
                                <div>
                                    <div class="fw-bold small">Kabel ODP-ODP</div>
                                    <small class="text-muted">Sambungan antar ODP</small>
                                </div>
                            </div>
                            <hr class="my-3">
                            <div class="legend-item">
                                <div class="fw-bold small text-primary">
                                    <i class="bi bi-layers me-1"></i>Layer Control
                                </div>
                                <small class="text-muted">Gunakan tombol di pojok kanan atas peta atau tombol quick switch di panel kiri untuk ganti layer peta</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>


</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Global variables
    let map;
    let markers = [];
    let allDevices = [];
    let allODPs = [];
    let allOLTs = [];
    let oltMarkers = [];
    let allLinks = [];
    let allOdpLinks = [];
    let currentFilter = 'all';
    let currentSearch = '';
    let odpLayerGroup = null;
    let cableLayerGroup = null;
    let oltLayerGroup = null;
    let animateTimer = null;
    let dashAnimId = null;
    let dotAnimId = null;
    let odpAnimateTimer = null;
    let odpDashAnimId = null;
    let odpDotAnimId = null;
    let markOdpMode = false;
    let baseLayers = {};
    let layerControl = null;

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeMap();
        loadMapData();

        // Setup event listeners
        setupEventListeners();
    });

    function initializeMap() {
        // Default center (Indonesia center for better coverage of potential ONU locations)
        const defaultCenter = [-6.2088, 106.8456];
        const defaultZoom = 13; // Lebih dekat agar tampilan awal Jakarta pas

        // Initialize map
        map = L.map('map', {
            center: defaultCenter,
            zoom: defaultZoom,
            zoomControl: true,
            scrollWheelZoom: true
        });

        // Define base layers
        const osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19
        });

        const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: '© <a href="https://www.esri.com/">Esri</a> — Source: Esri, Maxar, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community',
            maxZoom: 19
        });

        const googleSatelliteLayer = L.tileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
            attribution: '© <a href="https://www.google.com/maps">Google</a>',
            maxZoom: 20
        });

        const googleHybridLayer = L.tileLayer('https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}', {
            attribution: '© <a href="https://www.google.com/maps">Google</a>',
            maxZoom: 20
        });

        const bingSatelliteLayer = L.tileLayer('https://ecn.t3.tiles.virtualearth.net/tiles/a{q}.jpeg?g=1', {
            attribution: '© <a href="https://www.bing.com/maps">Microsoft Bing</a>',
            subdomains: ['t0', 't1', 't2', 't3'],
            maxZoom: 19
        });

        const cartoDbSatelliteLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const stamenSatelliteLayer = L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/satellite/{z}/{x}/{y}.jpg', {
            attribution: '© <a href="https://stamen.com/">Stamen Design</a> © <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            maxZoom: 18
        });

        const mapboxSatelliteLayer = L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
            attribution: '© <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 19
        });

        const openStreetMapSatelliteLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19
        });

        const cartoDbDarkLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbPositronLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbVoyagerLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbMatterLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/matter/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbAntiqueLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/antique/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbEcoLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/eco/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbMidnightLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/midnight/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbFlatBlueLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/flat_blue/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbFlatPurpleLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/flat_purple/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbFlatGreenLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/flat_green/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbFlatRedLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/flat_red/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbFlatOrangeLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/flat_orange/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const cartoDbFlatYellowLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/flat_yellow/{z}/{x}/{y}{r}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 20
        });

        const topoLayer = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://opentopomap.org/">OpenTopoMap</a> contributors',
            maxZoom: 17
        });

        // Store base layers
        baseLayers = {
            "Peta Normal": osmLayer,
            "Satelit Esri": satelliteLayer,
            "Satelit Google": googleSatelliteLayer,
            "Hybrid Google": googleHybridLayer,
            "Satelit Bing": bingSatelliteLayer,
            "CartoDB": cartoDbSatelliteLayer,
            "Stamen Satelit": stamenSatelliteLayer,
            "Mapbox Satelit": mapboxSatelliteLayer,
            "OpenStreetMap": openStreetMapSatelliteLayer,
            "CartoDB Dark": cartoDbDarkLayer,
            "CartoDB Positron": cartoDbPositronLayer,
            "CartoDB Voyager": cartoDbVoyagerLayer,
            "CartoDB Matter": cartoDbMatterLayer,
            "CartoDB Antique": cartoDbAntiqueLayer,
            "CartoDB Eco": cartoDbEcoLayer,
            "CartoDB Midnight": cartoDbMidnightLayer,
            "CartoDB Flat Blue": cartoDbFlatBlueLayer,
            "CartoDB Flat Purple": cartoDbFlatPurpleLayer,
            "CartoDB Flat Green": cartoDbFlatGreenLayer,
            "CartoDB Flat Red": cartoDbFlatRedLayer,
            "CartoDB Flat Orange": cartoDbFlatOrangeLayer,
            "CartoDB Flat Yellow": cartoDbFlatYellowLayer,
            "Topografi": topoLayer
        };

        // Add default layer (Satelit Esri)
        satelliteLayer.addTo(map);

        // Add layer control
        layerControl = L.control.layers(baseLayers).addTo(map);

        // Load saved layer preference
        const savedLayer = localStorage.getItem('mapLayerPreference');
        if (savedLayer && baseLayers[savedLayer]) {
            map.removeLayer(satelliteLayer);
            baseLayers[savedLayer].addTo(map);
            console.log(`🗺️ Loaded saved layer preference: ${savedLayer}`);
        }

        // Save layer preference when changed
        map.on('baselayerchange', function(e) {
            const layerName = Object.keys(baseLayers).find(key => baseLayers[key] === e.layer);
            if (layerName) {
                localStorage.setItem('mapLayerPreference', layerName);
                console.log(`🗺️ Layer changed to: ${layerName}`);
            }
        });

        // Add scale control
        L.control.scale().addTo(map);

        // Prepare layer groups
        odpLayerGroup = L.layerGroup().addTo(map);
        cableLayerGroup = L.layerGroup().addTo(map);
        console.log('🗺️ Map initialized with layer control');

        // Handle map click for ODP marking
        map.on('click', async (e) => {
            if (!markOdpMode) return;
            const { lat, lng } = e.latlng;
            const { value: name } = await Swal.fire({
                title: 'Tambah ODP',
                input: 'text',
                inputLabel: `Nama ODP (lat: ${lat.toFixed(6)}, lng: ${lng.toFixed(6)})`,
                inputPlaceholder: 'Mis. ODP Jl. Mawar',
                showCancelButton: true,
                confirmButtonText: 'Simpan',
                cancelButtonText: 'Batal'
            });
            if (name === undefined) return;
            const { value: odpId } = await Swal.fire({
                title: 'ID ODP',
                input: 'text',
                inputLabel: 'Masukkan ID unik (mis. ODP-010). Kosongkan untuk otomatis',
                inputPlaceholder: 'ODP-010',
                showCancelButton: true,
                confirmButtonText: 'Lanjut',
                cancelButtonText: 'Batal'
            });
            if (odpId === undefined) return;
            const { value: totalPorts } = await Swal.fire({
                title: 'Total Port',
                input: 'number',
                inputLabel: 'Jumlah port ODP',
                inputValue: 8,
                showCancelButton: true,
                confirmButtonText: 'Simpan',
                cancelButtonText: 'Batal'
            });
            if (totalPorts === undefined) return;
            try {
                const resp = await fetch('/admin/map/odps', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: odpId, name, lat, lng, total_ports: Number(totalPorts) })
                });
                const json = await resp.json();
                if (!json.success) throw new Error(json.message || 'Gagal menyimpan ODP');
                // Refresh ODP layer
                allODPs.push(json.data);
                renderODPLayer();
                Swal.fire({ icon: 'success', title: 'ODP tersimpan', timer: 1500, showConfirmButton: false });
            } catch (err) {
                Swal.fire({ icon: 'error', title: 'Gagal menyimpan ODP', text: err.message });
            }
        });
    }

    function setupEventListeners() {
        // Refresh button
        document.getElementById('refreshBtn').addEventListener('click', function() {
            loadMapData();
        });

        // Refresh data button in control panel
        document.getElementById('refreshDataBtn').addEventListener('click', function() {
            loadMapData();
        });

        // Layer quick switch buttons
        document.getElementById('switchToSatellite').addEventListener('click', function() {
            if (baseLayers['Satelit Esri']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add satellite layer
                baseLayers['Satelit Esri'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Satelit Esri');
                console.log('🗺️ Switched to satellite layer');
            }
        });

        document.getElementById('switchToGoogleSat').addEventListener('click', function() {
            if (baseLayers['Satelit Google']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add Google satellite layer
                baseLayers['Satelit Google'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Satelit Google');
                console.log('🗺️ Switched to Google satellite layer');
            }
        });

        document.getElementById('switchToGoogleHybrid').addEventListener('click', function() {
            if (baseLayers['Hybrid Google']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add Google hybrid layer
                baseLayers['Hybrid Google'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Hybrid Google');
                console.log('🗺️ Switched to Google hybrid layer');
            }
        });

        document.getElementById('switchToBingSat').addEventListener('click', function() {
            if (baseLayers['Satelit Bing']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add Bing satellite layer
                baseLayers['Satelit Bing'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Satelit Bing');
                console.log('🗺️ Switched to Bing satellite layer');
            }
        });

        document.getElementById('switchToCartoDb').addEventListener('click', function() {
            if (baseLayers['CartoDB']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB layer
                baseLayers['CartoDB'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB');
                console.log('🗺️ Switched to CartoDB layer');
            }
        });

        document.getElementById('switchToOSM').addEventListener('click', function() {
            if (baseLayers['OpenStreetMap']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add OpenStreetMap layer
                baseLayers['OpenStreetMap'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'OpenStreetMap');
                console.log('🗺️ Switched to OpenStreetMap layer');
            }
        });

        document.getElementById('switchToCartoDark').addEventListener('click', function() {
            if (baseLayers['CartoDB Dark']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Dark layer
                baseLayers['CartoDB Dark'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Dark');
                console.log('🗺️ Switched to CartoDB Dark layer');
            }
        });

        document.getElementById('switchToCartoPositron').addEventListener('click', function() {
            if (baseLayers['CartoDB Positron']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Positron layer
                baseLayers['CartoDB Positron'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Positron');
                console.log('🗺️ Switched to CartoDB Positron layer');
            }
        });

        document.getElementById('switchToCartoVoyager').addEventListener('click', function() {
            if (baseLayers['CartoDB Voyager']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Voyager layer
                baseLayers['CartoDB Voyager'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Voyager');
                console.log('🗺️ Switched to CartoDB Voyager layer');
            }
        });

        document.getElementById('switchToCartoMatter').addEventListener('click', function() {
            if (baseLayers['CartoDB Matter']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Matter layer
                baseLayers['CartoDB Matter'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Matter');
                console.log('🗺️ Switched to CartoDB Matter layer');
            }
        });

        document.getElementById('switchToCartoAntique').addEventListener('click', function() {
            if (baseLayers['CartoDB Antique']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Antique layer
                baseLayers['CartoDB Antique'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Antique');
                console.log('🗺️ Switched to CartoDB Antique layer');
            }
        });

        document.getElementById('switchToCartoEco').addEventListener('click', function() {
            if (baseLayers['CartoDB Eco']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Eco layer
                baseLayers['CartoDB Eco'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Eco');
                console.log('🗺️ Switched to CartoDB Eco layer');
            }
        });

        document.getElementById('switchToCartoMidnight').addEventListener('click', function() {
            if (baseLayers['CartoDB Midnight']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Midnight layer
                baseLayers['CartoDB Midnight'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Midnight');
                console.log('🗺️ Switched to CartoDB Midnight layer');
            }
        });

        document.getElementById('switchToCartoFlatBlue').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Blue']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Blue layer
                baseLayers['CartoDB Flat Blue'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Blue');
                console.log('🗺️ Switched to CartoDB Flat Blue layer');
            }
        });

        document.getElementById('switchToCartoFlatPurple').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Purple']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Purple layer
                baseLayers['CartoDB Flat Purple'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Purple');
                console.log('🗺️ Switched to CartoDB Flat Purple layer');
            }
        });

        document.getElementById('switchToCartoFlatGreen').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Green']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Green layer
                baseLayers['CartoDB Flat Green'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Green');
                console.log('🗺️ Switched to CartoDB Flat Green layer');
            }
        });

        document.getElementById('switchToCartoFlatRed').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Red']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Red layer
                baseLayers['CartoDB Flat Red'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Red');
                console.log('🗺️ Switched to CartoDB Flat Red layer');
            }
        });

        document.getElementById('switchToCartoFlatOrange').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Orange']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Orange layer
                baseLayers['CartoDB Flat Orange'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Orange');
                console.log('🗺️ Switched to CartoDB Flat Orange layer');
            }
        });

        document.getElementById('switchToCartoFlatYellow').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Yellow']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Yellow layer
                baseLayers['CartoDB Flat Yellow'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Yellow');
                console.log('🗺️ Switched to CartoDB Flat Yellow layer');
            }
        });

        document.getElementById('switchToTopo').addEventListener('click', function() {
            if (baseLayers['Topografi']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add topo layer
                baseLayers['Topografi'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Topografi');
                console.log('🗺️ Switched to topo layer');
            }
        });

        document.getElementById('switchToNormal').addEventListener('click', function() {
            if (baseLayers['Peta Normal']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add normal layer
                baseLayers['Peta Normal'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Peta Normal');
                console.log('🗺️ Switched to normal layer');
            }
        });

        document.getElementById('switchToOSM').addEventListener('click', function() {
            if (baseLayers['OpenStreetMap']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add OpenStreetMap layer
                baseLayers['OpenStreetMap'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'OpenStreetMap');
                console.log('🗺️ Switched to OpenStreetMap layer');
            }
        });

        document.getElementById('switchToCartoDark').addEventListener('click', function() {
            if (baseLayers['CartoDB Dark']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Dark layer
                baseLayers['CartoDB Dark'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Dark');
                console.log('🗺️ Switched to CartoDB Dark layer');
            }
        });

        document.getElementById('switchToCartoPositron').addEventListener('click', function() {
            if (baseLayers['CartoDB Positron']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Positron layer
                baseLayers['CartoDB Positron'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Positron');
                console.log('🗺️ Switched to CartoDB Positron layer');
            }
        });

        document.getElementById('switchToCartoVoyager').addEventListener('click', function() {
            if (baseLayers['CartoDB Voyager']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Voyager layer
                baseLayers['CartoDB Voyager'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Voyager');
                console.log('🗺️ Switched to CartoDB Voyager layer');
            }
        });

        document.getElementById('switchToCartoMatter').addEventListener('click', function() {
            if (baseLayers['CartoDB Matter']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Matter layer
                baseLayers['CartoDB Matter'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Matter');
                console.log('🗺️ Switched to CartoDB Matter layer');
            }
        });

        document.getElementById('switchToCartoAntique').addEventListener('click', function() {
            if (baseLayers['CartoDB Antique']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Antique layer
                baseLayers['CartoDB Antique'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Antique');
                console.log('🗺️ Switched to CartoDB Antique layer');
            }
        });

        document.getElementById('switchToCartoEco').addEventListener('click', function() {
            if (baseLayers['CartoDB Eco']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Eco layer
                baseLayers['CartoDB Eco'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Eco');
                console.log('🗺️ Switched to CartoDB Eco layer');
            }
        });

        document.getElementById('switchToCartoMidnight').addEventListener('click', function() {
            if (baseLayers['CartoDB Midnight']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Midnight layer
                baseLayers['CartoDB Midnight'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Midnight');
                console.log('🗺️ Switched to CartoDB Midnight layer');
            }
        });

        document.getElementById('switchToCartoFlatBlue').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Blue']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Blue layer
                baseLayers['CartoDB Flat Blue'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Blue');
                console.log('🗺️ Switched to CartoDB Flat Blue layer');
            }
        });

        document.getElementById('switchToCartoFlatPurple').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Purple']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Purple layer
                baseLayers['CartoDB Flat Purple'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Purple');
                console.log('🗺️ Switched to CartoDB Flat Purple layer');
            }
        });

        document.getElementById('switchToCartoFlatGreen').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Green']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Green layer
                baseLayers['CartoDB Flat Green'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Green');
                console.log('🗺️ Switched to CartoDB Flat Green layer');
            }
        });

        document.getElementById('switchToCartoFlatRed').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Red']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Red layer
                baseLayers['CartoDB Flat Red'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Red');
                console.log('🗺️ Switched to CartoDB Flat Red layer');
            }
        });

        document.getElementById('switchToCartoFlatOrange').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Orange']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Orange layer
                baseLayers['CartoDB Flat Orange'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Orange');
                console.log('🗺️ Switched to CartoDB Flat Orange layer');
            }
        });

        document.getElementById('switchToCartoFlatYellow').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Yellow']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Yellow layer
                baseLayers['CartoDB Flat Yellow'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Yellow');
                console.log('🗺️ Switched to CartoDB Flat Yellow layer');
            }
        });

        document.getElementById('switchToTopo').addEventListener('click', function() {
            if (baseLayers['Topografi']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add topo layer
                baseLayers['Topografi'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Topografi');
                console.log('🗺️ Switched to topo layer');
            }
        });

        document.getElementById('switchToNormal').addEventListener('click', function() {
            if (baseLayers['Peta Normal']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add normal layer
                baseLayers['Peta Normal'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Peta Normal');
                console.log('🗺️ Switched to normal layer');
            }
        });

        document.getElementById('switchToOSM').addEventListener('click', function() {
            if (baseLayers['OpenStreetMap']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add OpenStreetMap layer
                baseLayers['OpenStreetMap'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'OpenStreetMap');
                console.log('🗺️ Switched to OpenStreetMap layer');
            }
        });

        document.getElementById('switchToCartoDark').addEventListener('click', function() {
            if (baseLayers['CartoDB Dark']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Dark layer
                baseLayers['CartoDB Dark'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Dark');
                console.log('🗺️ Switched to CartoDB Dark layer');
            }
        });

        document.getElementById('switchToCartoPositron').addEventListener('click', function() {
            if (baseLayers['CartoDB Positron']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Positron layer
                baseLayers['CartoDB Positron'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Positron');
                console.log('🗺️ Switched to CartoDB Positron layer');
            }
        });

        document.getElementById('switchToCartoVoyager').addEventListener('click', function() {
            if (baseLayers['CartoDB Voyager']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Voyager layer
                baseLayers['CartoDB Voyager'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Voyager');
                console.log('🗺️ Switched to CartoDB Voyager layer');
            }
        });

        document.getElementById('switchToCartoMatter').addEventListener('click', function() {
            if (baseLayers['CartoDB Matter']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Matter layer
                baseLayers['CartoDB Matter'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Matter');
                console.log('🗺️ Switched to CartoDB Matter layer');
            }
        });

        document.getElementById('switchToCartoAntique').addEventListener('click', function() {
            if (baseLayers['CartoDB Antique']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Antique layer
                baseLayers['CartoDB Antique'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Antique');
                console.log('🗺️ Switched to CartoDB Antique layer');
            }
        });

        document.getElementById('switchToCartoEco').addEventListener('click', function() {
            if (baseLayers['CartoDB Eco']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Eco layer
                baseLayers['CartoDB Eco'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Eco');
                console.log('🗺️ Switched to CartoDB Eco layer');
            }
        });

        document.getElementById('switchToCartoMidnight').addEventListener('click', function() {
            if (baseLayers['CartoDB Midnight']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Midnight layer
                baseLayers['CartoDB Midnight'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Midnight');
                console.log('🗺️ Switched to CartoDB Midnight layer');
            }
        });

        document.getElementById('switchToCartoFlatBlue').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Blue']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Blue layer
                baseLayers['CartoDB Flat Blue'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Blue');
                console.log('🗺️ Switched to CartoDB Flat Blue layer');
            }
        });

        document.getElementById('switchToCartoFlatPurple').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Purple']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Purple layer
                baseLayers['CartoDB Flat Purple'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Purple');
                console.log('🗺️ Switched to CartoDB Flat Purple layer');
            }
        });

        document.getElementById('switchToCartoFlatGreen').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Green']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Green layer
                baseLayers['CartoDB Flat Green'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Green');
                console.log('🗺️ Switched to CartoDB Flat Green layer');
            }
        });

        document.getElementById('switchToCartoFlatRed').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Red']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Red layer
                baseLayers['CartoDB Flat Red'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Red');
                console.log('🗺️ Switched to CartoDB Flat Red layer');
            }
        });

        document.getElementById('switchToCartoFlatOrange').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Orange']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Orange layer
                baseLayers['CartoDB Flat Orange'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Orange');
                console.log('🗺️ Switched to CartoDB Flat Orange layer');
            }
        });

        document.getElementById('switchToCartoFlatYellow').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Yellow']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Yellow layer
                baseLayers['CartoDB Flat Yellow'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Yellow');
                console.log('🗺️ Switched to CartoDB Flat Yellow layer');
            }
        });

        document.getElementById('switchToTopo').addEventListener('click', function() {
            if (baseLayers['Topografi']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add topo layer
                baseLayers['Topografi'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Topografi');
                console.log('🗺️ Switched to topo layer');
            }
        });

        document.getElementById('switchToNormal').addEventListener('click', function() {
            if (baseLayers['Peta Normal']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add normal layer
                baseLayers['Peta Normal'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Peta Normal');
                console.log('🗺️ Switched to normal layer');
            }
        });

        document.getElementById('switchToStamenSat').addEventListener('click', function() {
            if (baseLayers['Stamen Satelit']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add Stamen satellite layer
                baseLayers['Stamen Satelit'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Stamen Satelit');
                console.log('🗺️ Switched to Stamen satellite layer');
            }
        });

        document.getElementById('switchToMapboxSat').addEventListener('click', function() {
            if (baseLayers['Mapbox Satelit']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add Mapbox satellite layer
                baseLayers['Mapbox Satelit'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Mapbox Satelit');
                console.log('🗺️ Switched to Mapbox satellite layer');
            }
        });

        document.getElementById('switchToOSM').addEventListener('click', function() {
            if (baseLayers['OpenStreetMap']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add OpenStreetMap layer
                baseLayers['OpenStreetMap'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'OpenStreetMap');
                console.log('🗺️ Switched to OpenStreetMap layer');
            }
        });

        document.getElementById('switchToCartoDark').addEventListener('click', function() {
            if (baseLayers['CartoDB Dark']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Dark layer
                baseLayers['CartoDB Dark'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Dark');
                console.log('🗺️ Switched to CartoDB Dark layer');
            }
        });

        document.getElementById('switchToCartoPositron').addEventListener('click', function() {
            if (baseLayers['CartoDB Positron']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Positron layer
                baseLayers['CartoDB Positron'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Positron');
                console.log('🗺️ Switched to CartoDB Positron layer');
            }
        });

        document.getElementById('switchToCartoVoyager').addEventListener('click', function() {
            if (baseLayers['CartoDB Voyager']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Voyager layer
                baseLayers['CartoDB Voyager'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Voyager');
                console.log('🗺️ Switched to CartoDB Voyager layer');
            }
        });

        document.getElementById('switchToCartoMatter').addEventListener('click', function() {
            if (baseLayers['CartoDB Matter']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Matter layer
                baseLayers['CartoDB Matter'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Matter');
                console.log('🗺️ Switched to CartoDB Matter layer');
            }
        });

        document.getElementById('switchToCartoAntique').addEventListener('click', function() {
            if (baseLayers['CartoDB Antique']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Antique layer
                baseLayers['CartoDB Antique'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Antique');
                console.log('🗺️ Switched to CartoDB Antique layer');
            }
        });

        document.getElementById('switchToCartoEco').addEventListener('click', function() {
            if (baseLayers['CartoDB Eco']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Eco layer
                baseLayers['CartoDB Eco'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Eco');
                console.log('🗺️ Switched to CartoDB Eco layer');
            }
        });

        document.getElementById('switchToCartoMidnight').addEventListener('click', function() {
            if (baseLayers['CartoDB Midnight']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Midnight layer
                baseLayers['CartoDB Midnight'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Midnight');
                console.log('🗺️ Switched to CartoDB Midnight layer');
            }
        });

        document.getElementById('switchToCartoFlatBlue').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Blue']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Blue layer
                baseLayers['CartoDB Flat Blue'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Blue');
                console.log('🗺️ Switched to CartoDB Flat Blue layer');
            }
        });

        document.getElementById('switchToCartoFlatPurple').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Purple']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Purple layer
                baseLayers['CartoDB Flat Purple'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Purple');
                console.log('🗺️ Switched to CartoDB Flat Purple layer');
            }
        });

        document.getElementById('switchToCartoFlatGreen').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Green']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Green layer
                baseLayers['CartoDB Flat Green'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Green');
                console.log('🗺️ Switched to CartoDB Flat Green layer');
            }
        });

        document.getElementById('switchToCartoFlatRed').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Red']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Red layer
                baseLayers['CartoDB Flat Red'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Red');
                console.log('🗺️ Switched to CartoDB Flat Red layer');
            }
        });

        document.getElementById('switchToCartoFlatOrange').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Orange']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Orange layer
                baseLayers['CartoDB Flat Orange'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Orange');
                console.log('🗺️ Switched to CartoDB Flat Orange layer');
            }
        });

        document.getElementById('switchToCartoFlatYellow').addEventListener('click', function() {
            if (baseLayers['CartoDB Flat Yellow']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add CartoDB Flat Yellow layer
                baseLayers['CartoDB Flat Yellow'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'CartoDB Flat Yellow');
                console.log('🗺️ Switched to CartoDB Flat Yellow layer');
            }
        });

        document.getElementById('switchToNormal').addEventListener('click', function() {
            if (baseLayers['Peta Normal']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add normal layer
                baseLayers['Peta Normal'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Peta Normal');
                console.log('🗺️ Switched to normal layer');
            }
        });

        document.getElementById('switchToTopo').addEventListener('click', function() {
            if (baseLayers['Topografi']) {
                // Remove current layer
                map.eachLayer(function(layer) {
                    if (layer instanceof L.TileLayer) {
                        map.removeLayer(layer);
                    }
                });
                // Add topo layer
                baseLayers['Topografi'].addTo(map);
                localStorage.setItem('mapLayerPreference', 'Topografi');
                console.log('🗺️ Switched to topo layer');
            }
        });

        // Toggle mark ODP mode
        const markBtn = document.getElementById('markOdpBtn');
        if (markBtn) {
            markBtn.addEventListener('click', function() {
                markOdpMode = !markOdpMode;
                this.classList.toggle('btn-outline-primary', !markOdpMode);
                this.classList.toggle('btn-success', markOdpMode);
                this.innerHTML = markOdpMode ? '<i class="bi bi-check2-circle me-2"></i>Mode ODP Aktif' : '<i class="bi bi-bezier me-2"></i>Tandai ODP';
                if (markOdpMode) {
                    Swal.fire({
                        icon: 'info',
                        title: 'Mode Tandai ODP',
                        text: 'Klik titik di peta untuk menambahkan ODP. Isi nama lalu simpan.',
                        timer: 2500,
                        showConfirmButton: false
                    });
                }
            });
        }

        // Link ONU to ODP
        const linkBtn = document.getElementById('linkOnuBtn');
        if (linkBtn) {
            linkBtn.addEventListener('click', async function() {
                if (!allDevices || allDevices.length === 0 || !allODPs || allODPs.length === 0) {
                    return Swal.fire({ icon: 'warning', title: 'Data belum siap', text: 'Pastikan data perangkat dan ODP sudah termuat.' });
                }
                // Pilih ONU
                const deviceChoices = {};
                allDevices.forEach(d => { deviceChoices[d.id] = `${d.serialNumber} (${d.pppoeUsername})`; });
                const { value: onuId } = await Swal.fire({
                    title: 'Pilih ONU',
                    input: 'select',
                    inputOptions: deviceChoices,
                    inputPlaceholder: 'Pilih ONU',
                    showCancelButton: true
                });
                if (!onuId) return;
                // Pilih ODP (tampilkan kapasitas)
                const odpChoices = {};
                allODPs.forEach(o => {
                    const used = o.used_ports || 0; const total = o.total_ports || 8;
                    odpChoices[o.id] = `${o.name || o.id} — ${used}/${total} ports`;
                });
                const { value: odpId } = await Swal.fire({
                    title: 'Pilih ODP',
                    input: 'select',
                    inputOptions: odpChoices,
                    inputPlaceholder: 'Pilih ODP',
                    showCancelButton: true
                });
                if (!odpId) return;

                try {
                    const resp = await fetch('/admin/map/link-onu-odp', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ onuId, odpId })
                    });
                    const json = await resp.json();
                    if (!json.success) throw new Error(json.message || 'Gagal menyimpan link');
                    // Update in-memory and render
                    allLinks = allLinks.filter(l => l.onuId !== onuId).concat([{ onuId, odpId }]);
                    cableLayerGroup.clearLayers();
                    renderPermanentCables();
                    Swal.fire({ icon: 'success', title: 'Tersambung', text: 'ONU berhasil dihubungkan ke ODP.', timer: 1500, showConfirmButton: false });
                } catch (err) {
                    Swal.fire({ icon: 'error', title: 'Gagal menyimpan', text: err.message });
                }
            });
        }

        // Link ODP to ODP
        const linkOdpBtn = document.getElementById('linkOdpBtn');
        if (linkOdpBtn) {
            linkOdpBtn.addEventListener('click', async function() {
                if (!allODPs || allODPs.length < 2) {
                    return Swal.fire({ icon: 'warning', title: 'Data ODP kurang', text: 'Tambahkan minimal 2 ODP.' });
                }
                const odpOptions = {};
                allODPs.forEach(o => { odpOptions[o.id] = `${o.name || o.id}`; });
                const { value: fromOdpId } = await Swal.fire({
                    title: 'Pilih ODP A', input: 'select', inputOptions: odpOptions,
                    inputPlaceholder: 'Pilih ODP A', showCancelButton: true
                });
                if (!fromOdpId) return;
                const { value: toOdpId } = await Swal.fire({
                    title: 'Pilih ODP B', input: 'select', inputOptions: odpOptions,
                    inputPlaceholder: 'Pilih ODP B', showCancelButton: true
                });
                if (!toOdpId) return;
                if (fromOdpId === toOdpId) return Swal.fire({ icon: 'warning', title: 'Tidak valid', text: 'ODP A dan ODP B harus berbeda.' });
                try {
                    const resp = await fetch('/admin/map/link-odp-odp', {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ fromOdpId, toOdpId })
                    });
                    const json = await resp.json();
                    if (!json.success) throw new Error(json.message || 'Gagal menyimpan link ODP');
                    allOdpLinks.push({ fromOdpId, toOdpId });
                    renderOdpCables();
                    Swal.fire({ icon: 'success', title: 'Tersambung', text: 'ODP↔ODP berhasil dihubungkan.', timer: 1500, showConfirmButton: false });
                } catch (err) {
                    Swal.fire({ icon: 'error', title: 'Gagal menyimpan', text: err.message });
                }
            });
        }

        // Toggle control panel
        document.getElementById('toggleControlPanel').addEventListener('click', function() {
            const controlPanel = document.querySelector('.control-panel');
            const toggleBtn = this;

            controlPanel.classList.toggle('collapsed');

            // Update button icon and tooltip
            if (controlPanel.classList.contains('collapsed')) {
                toggleBtn.setAttribute('title', 'Show Panel');
            } else {
                toggleBtn.setAttribute('title', 'Hide Panel');
            }
        });



        // Search input
        document.getElementById('searchInput').addEventListener('input', function(e) {
            currentSearch = e.target.value.trim();
            filterDevices();
        });

        // Clear search button
        document.getElementById('clearSearchBtn').addEventListener('click', function() {
            document.getElementById('searchInput').value = '';
            currentSearch = '';
            filterDevices();
        });

        // Filter buttons
        document.querySelectorAll('.btn-filter').forEach(btn => {
            btn.addEventListener('click', function() {
                // Remove active class from all buttons
                document.querySelectorAll('.btn-filter').forEach(b => b.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');

                currentFilter = this.dataset.filter;
                filterDevices();
            });
        });
    }

    // Updated loadMapData function with auto-focus capability
    async function loadMapData() {
        try {
            console.log('📍 Loading map data...');
            showLoading(true);

            const [response, oltResponse] = await Promise.all([
                fetch('/admin/map/data'),
                fetch('/admin/map/olt-devices').catch(() => ({ json: () => ({ success: false, devices: [] }) }))
            ]);
            
            const data = await response.json();
            const oltData = await oltResponse.json();

            if (data.success) {
                allDevices = data.devices;
                allODPs = Array.isArray(data.odps) ? data.odps : [];
                allLinks = Array.isArray(data.links) ? data.links : [];
                allOdpLinks = Array.isArray(data.odpLinks) ? data.odpLinks : [];
                allOLTs = oltData.success ? oltData.devices : [];
                
                displayDevicesOnMap(data.devices);
                displayOLTsOnMap(allOLTs);
                updateDeviceList(data.devices);
                updateStatistics(data.summary);

                console.log(`📍 Loaded ${data.devices.length} devices`);

                // Focus map on registered ONU/ODP locations if this is the first load
                const devicesWithLocation = data.devices.filter(device => 
                    device.hasLocation && device.location && 
                    (device.location.lat !== -2.5489 || device.location.lng !== 118.0149)
                );
                
                const allLocations = [];
                
                // Collect device locations
                devicesWithLocation.forEach(device => {
                    if (device.location) {
                        allLocations.push([device.location.lat, device.location.lng]);
                    }
                });
                
                // Collect ODP locations
                if (Array.isArray(allODPs)) {
                    allODPs.forEach(odp => {
                        if (odp.lat && odp.lng) {
                            allLocations.push([odp.lat, odp.lng]);
                        }
                    });
                }
                
                // Auto-focus map on data if locations exist
                if (allLocations.length > 0) {
                    console.log(`🎯 Found ${allLocations.length} locations with data, focusing map`);
                    const bounds = L.latLngBounds(allLocations);
                    map.fitBounds(bounds, { padding: [50, 50] });
                } else {
                    console.log('🗺️ No registered locations found, using default view');
                }

                // Render ODPs if available
                renderODPLayer();
                renderPermanentCables();
                renderOdpCables();

                // Hide loading indicator after data processed (even if 0 devices)
                setTimeout(() => {
                    const loadingIndicator = document.getElementById('loadingIndicator');
                    if (loadingIndicator) {
                        loadingIndicator.style.display = 'none';
                    }
                }, 500);
            } else {
                throw new Error(data.message || 'Failed to load map data');
            }
        } catch (error) {
            console.error('❌ Error loading map data:', error);

            // Show error state in device list
            const deviceList = document.getElementById('deviceList');
            const loadingIndicator = document.getElementById('loadingIndicator');
            if (loadingIndicator) {
                loadingIndicator.innerHTML = `
                    <div class="text-center text-danger py-3">
                        <i class="bi bi-exclamation-triangle fs-2 mb-2"></i>
                        <div>Gagal memuat data</div>
                        <small class="text-muted">${error.message}</small>
                        <br>
                        <button onclick="loadMapData()" class="btn btn-sm btn-outline-danger mt-2">
                            <i class="bi bi-arrow-clockwise me-1"></i>Coba Lagi
                        </button>
                    </div>
                `;
            }

            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Gagal memuat data peta: ' + error.message,
                confirmButtonText: 'OK'
            });
        } finally {
            showLoading(false);
        }
    }

    function displayDevicesOnMap(devices) {
        // Clear existing markers
        markers.forEach(marker => map.removeLayer(marker));
        markers = [];
        // Clear cable layer
        if (cableLayerGroup) {
            cableLayerGroup.clearLayers();
        }

        if (devices.length === 0) {
            console.log('📍 No devices to display');
            return;
        }

        // Group devices by location for clustering
        const devicesByLocation = {};
        const devicesWithoutLocation = [];

        devices.forEach(device => {
            if (device.hasLocation && device.location) {
                const key = `${device.location.lat},${device.location.lng}`;
                if (!devicesByLocation[key]) {
                    devicesByLocation[key] = [];
                }
                devicesByLocation[key].push(device);
            } else {
                devicesWithoutLocation.push(device);
            }
        });

        // Add markers for devices with location
        Object.keys(devicesByLocation).forEach(locationKey => {
            const devicesAtLocation = devicesByLocation[locationKey];
            const firstDevice = devicesAtLocation[0];

            const markerIcon = createCustomIcon(devicesAtLocation);
            const marker = L.marker([firstDevice.location.lat, firstDevice.location.lng], {
                icon: markerIcon
            });

            // Create popup content
            const popupContent = createPopupContent(devicesAtLocation);
            marker.bindPopup(popupContent, {
                maxWidth: 400,
                className: 'custom-popup'
            });

            // Add click event
            marker.on('click', function() {
                highlightDeviceInList(firstDevice.id);
                // Jika sudah ada link permanen, biarkan renderPermanentCables menanganinya
                const hasLink = allLinks && allLinks.find(l => l.onuId === firstDevice.id);
                if (hasLink) return;
                // Jika belum, gambar rute ke ODP terdekat (preview saja)
                if (firstDevice.location) {
                    const odp = findNearestODP(firstDevice.location.lat, firstDevice.location.lng);
                    if (odp) {
                        cableLayerGroup.clearLayers();
                        animateCable([
                            L.latLng(firstDevice.location.lat, firstDevice.location.lng),
                            L.latLng(odp.lat, odp.lng)
                        ]);
                    }
                }
            });

            marker.addTo(map);
            markers.push(marker);
        });

        // Add markers for devices without location (as small squares)
        devicesWithoutLocation.forEach(device => {
            const markerIcon = L.divIcon({
                className: 'custom-marker',
                html: `<div class="marker-no-location"></div>`,
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            });

            const marker = L.marker([-2.5489, 118.0149], { // Default location
                icon: markerIcon
            });

            const popupContent = createPopupContent([device]);
            marker.bindPopup(popupContent, {
                maxWidth: 300,
                className: 'custom-popup'
            });

            marker.addTo(map);
            markers.push(marker);
        });

        console.log(`📍 Displayed ${markers.length} device markers on map`);
    }

    function displayOLTsOnMap(olts) {
        // Clear existing OLT markers
        if (oltLayerGroup) {
            oltLayerGroup.clearLayers();
        } else {
            oltLayerGroup = L.layerGroup().addTo(map);
        }
        
        oltMarkers = [];

        if (!olts || olts.length === 0) {
            console.log('📡 No OLT devices to display');
            return;
        }

        olts.forEach(olt => {
            if (!olt.location || !olt.location.lat || !olt.location.lng) {
                return;
            }

            // Create custom OLT icon
            const iconHtml = `
                <div style="
                    background: ${olt.status.online ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' : 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)'};
                    width: 40px;
                    height: 40px;
                    border-radius: 8px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 20px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                    border: 3px solid white;
                ">
                    <i class="bi bi-router-fill"></i>
                </div>
                <div style="
                    position: absolute;
                    top: -8px;
                    right: -8px;
                    width: 16px;
                    height: 16px;
                    border-radius: 50%;
                    background: ${olt.status.online ? '#4caf50' : '#f44336'};
                    border: 2px solid white;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                "></div>
            `;

            const oltIcon = L.divIcon({
                className: 'custom-olt-marker',
                html: iconHtml,
                iconSize: [40, 40],
                iconAnchor: [20, 40],
                popupAnchor: [0, -45]
            });

            const marker = L.marker([olt.location.lat, olt.location.lng], {
                icon: oltIcon,
                title: olt.name
            });

            // Create popup content for OLT
            const popupContent = `
                <div class="olt-popup">
                    <h6 class="mb-2">
                        <i class="bi bi-router-fill text-primary"></i>
                        <strong>${olt.name}</strong>
                    </h6>
                    <div class="mb-2">
                        <small class="text-muted">Type:</small>
                        <span class="badge bg-info">OLT</span>
                    </div>
                    <table class="table table-sm table-borderless mb-2">
                        <tr>
                            <td><i class="bi bi-hdd-network"></i> IP:</td>
                            <td><strong>${olt.host}</strong></td>
                        </tr>
                        <tr>
                            <td><i class="bi bi-building"></i> Vendor:</td>
                            <td><strong>${olt.vendor.toUpperCase()}</strong></td>
                        </tr>
                        <tr>
                            <td><i class="bi bi-clock"></i> Uptime:</td>
                            <td><strong>${olt.status.uptime}</strong></td>
                        </tr>
                        <tr>
                            <td><i class="bi bi-diagram-3"></i> PON Ports:</td>
                            <td><strong>${olt.status.activePorts}/${olt.status.totalPorts} Active</strong></td>
                        </tr>
                        <tr>
                            <td><i class="bi bi-geo-alt"></i> Location:</td>
                            <td><small>${olt.location.address}</small></td>
                        </tr>
                    </table>
                    <div class="d-grid gap-2">
                        <a href="/admin/olt" class="btn btn-sm btn-primary">
                            <i class="bi bi-eye"></i> View Details
                        </a>
                    </div>
                </div>
            `;

            marker.bindPopup(popupContent, {
                maxWidth: 350,
                className: 'custom-popup olt-popup-container'
            });

            marker.addTo(oltLayerGroup);
            oltMarkers.push(marker);
        });

        console.log(`📡 Displayed ${oltMarkers.length} OLT markers on map`);
    }

    // Toggle control panel visibility
    function toggleControlPanel() {
        const controlPanel = document.getElementById('controlPanelContainer');
        const mapContainer = document.getElementById('mapContainer');
        const showButton = document.getElementById('showControlPanelBtn');
            
            if (controlPanel.style.display === 'none') {
                // Show control panel
                controlPanel.style.display = 'block';
                mapContainer.className = 'col-12 col-lg-8';
                showButton.style.display = 'none';
            } else {
                // Hide control panel
                controlPanel.style.display = 'none';
                mapContainer.className = 'col-12';
                showButton.style.display = 'block';
            }
            
            // Trigger map resize
            if (map) {
                setTimeout(() => {
                    map.invalidateSize();
                }, 100);
            }
        }
        
        // Function to update SSID - Global scope
        window.updateSSID = function(deviceId) {
            const ssidInput = document.getElementById(`ssid-input-${deviceId}`);
            const newSSID = ssidInput.value.trim();
            
            if (!newSSID) {
                Swal.fire({
                    icon: 'warning',
                    title: 'SSID Kosong',
                    text: 'SSID tidak boleh kosong'
                });
                return;
            }
            
            if (!confirm(`Apakah Anda yakin ingin mengubah SSID menjadi "${newSSID}"?`)) {
                return;
            }
            
            // Disable the button during processing
            const button = ssidInput.nextElementSibling;
            const originalText = button.textContent;
            button.textContent = 'Memproses...';
            button.disabled = true;
            
            // Send request to update SSID
            fetch('/admin/map/update-wifi', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    deviceId: deviceId,
                    ssid: newSSID
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.results.ssid.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'SSID Berhasil Diubah!',
                        text: data.results.ssid.message,
                        timer: 3000,
                        showConfirmButton: false
                    });
                    // Reload map data to reflect changes
                    setTimeout(() => loadMapData(), 1000);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Gagal Mengubah SSID',
                        text: data.results.ssid?.message || data.message || 'Terjadi kesalahan'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Terjadi kesalahan saat mengubah SSID'
                });
            })
            .finally(() => {
                // Re-enable the button
                button.textContent = originalText;
                button.disabled = false;
            });
        }
        
        // Function to update password - Global scope
        window.updatePassword = function(deviceId) {
            const passwordInput = document.getElementById(`password-input-${deviceId}`);
            const newPassword = passwordInput.value.trim();
            
            if (!newPassword) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Password Kosong',
                    text: 'Password tidak boleh kosong'
                });
                return;
            }
            
            if (newPassword.length < 8) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Password Terlalu Pendek',
                    text: 'Password minimal 8 karakter'
                });
                return;
            }
            
            if (!confirm(`Apakah Anda yakin ingin mengubah password WiFi?`)) {
                return;
            }
            
            // Disable the button during processing
            const button = passwordInput.nextElementSibling;
            const originalText = button.textContent;
            button.textContent = 'Memproses...';
            button.disabled = true;
            
            // Send request to update password
            fetch('/admin/map/update-wifi', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    deviceId: deviceId,
                    password: newPassword
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.results.password.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Password Berhasil Diubah!',
                        text: data.results.password.message,
                        timer: 3000,
                        showConfirmButton: false
                    });
                    // Clear the password input for security
                    passwordInput.value = '';
                    // Reload map data to reflect changes
                    setTimeout(() => loadMapData(), 1000);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Gagal Mengubah Password',
                        text: data.results.password?.message || data.message || 'Terjadi kesalahan'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Terjadi kesalahan saat mengubah password'
                });
            })
            .finally(() => {
                // Re-enable the button
                button.textContent = originalText;
                button.disabled = false;
            });
        }
        
        // Setup toggle button event listeners
        document.addEventListener('DOMContentLoaded', function() {
            const toggleButton = document.getElementById('toggleControlPanel');
            const showButton = document.getElementById('showControlPanelBtn');
            
            if (toggleButton) {
                toggleButton.addEventListener('click', toggleControlPanel);
            }
            
            if (showButton) {
                showButton.addEventListener('click', toggleControlPanel);
            }
        });
    }

    function renderPermanentCables() {
        if (!allLinks || allLinks.length === 0) return;
        // Gambar kabel untuk semua link permanen
        allLinks.forEach(link => {
            const dev = allDevices.find(d => d.id === link.onuId && d.hasLocation);
            const odp = allODPs.find(o => o.id === link.odpId);
            if (dev && odp) {
                animateCable([
                    L.latLng(dev.location.lat, dev.location.lng),
                    L.latLng(odp.lat, odp.lng)
                ]);
            }
        });
    }

    function renderODPLayer() {
        if (!odpLayerGroup) return;
        odpLayerGroup.clearLayers();
        if (!allODPs || allODPs.length === 0) return;

        allODPs.forEach(odp => {
            const icon = L.divIcon({
                className: 'custom-marker',
                html: `<div class="odp-marker" title="${odp.name}"></div>`,
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            });
            const m = L.marker([odp.lat, odp.lng], { icon });
            const used = odp.used_ports || 0; const total = odp.total_ports || 8;
            m.bindPopup(`<strong>ODP:</strong> ${odp.name || odp.id}<br><small>Ports: ${used}/${total} terpakai</small>`);
            m.addTo(odpLayerGroup);
        });
    }

    function renderOdpCables() {
        console.log('🔗 Rendering ODP cables...', allOdpLinks);
        if (!allOdpLinks || allOdpLinks.length === 0) {
            console.log('🔗 No ODP links to render');
            return;
        }
        allOdpLinks.forEach((link, index) => {
            console.log(`🔗 Processing ODP link ${index + 1}:`, link);
            const a = allODPs.find(o => o.id === link.fromOdpId);
            const b = allODPs.find(o => o.id === link.toOdpId);
            console.log(`🔗 ODP A:`, a);
            console.log(`🔗 ODP B:`, b);
            if (a && b) {
                console.log(`🔗 Drawing cable from ODP ${a.name || a.id} to ODP ${b.name || b.id}`);
                animateCable([
                    L.latLng(a.lat, a.lng),
                    L.latLng(b.lat, b.lng)
                ], 'odp-odp');
            } else {
                console.log(`🔗 Cannot draw cable - missing ODP data`);
            }
        });
    }

    function findNearestODP(lat, lng) {
        if (!allODPs || allODPs.length === 0) return null;
        let best = null;
        let bestDist = Infinity;
        allODPs.forEach(odp => {
            const d = map.distance([lat, lng], [odp.lat, odp.lng]);
            if (d < bestDist) {
                bestDist = d;
                best = { ...odp, distance: d };
            }
        });
        return best;
    }

    function animateCable(latlngs, cableType = 'onu-odp') {
        if (!latlngs || latlngs.length < 2) return;
        // Hentikan animasi sebelumnya berdasarkan jenis kabel
        if (cableType === 'odp-odp') {
            if (odpAnimateTimer) clearInterval(odpAnimateTimer);
            if (odpDashAnimId) cancelAnimationFrame(odpDashAnimId);
            if (odpDotAnimId) cancelAnimationFrame(odpDotAnimId);
        } else {
            if (animateTimer) clearInterval(animateTimer);
            if (dashAnimId) cancelAnimationFrame(dashAnimId);
            if (dotAnimId) cancelAnimationFrame(dotAnimId);
        }

        // Tentukan warna dan style berdasarkan jenis kabel
        let cableColor, dotColor, weight, dashArray;
        if (cableType === 'odp-odp') {
            cableColor = '#FF6B00'; // Orange terang untuk ODP ke ODP
            dotColor = '#FF6B00';
            weight = 4; // Lebih tebal
            dashArray = '10 8'; // Dash lebih panjang
        } else {
            cableColor = '#2196f3'; // Blue untuk ONU ke ODP
            dotColor = '#2196f3';
            weight = 3;
            dashArray = '8 12';
        }

        const poly = L.polyline(latlngs, { 
            color: cableColor, 
            weight: weight, 
            opacity: 1, // Full opacity
            dashArray: dashArray,
            className: cableType === 'odp-odp' ? 'odp-cable' : 'onu-cable'
        });
        cableLayerGroup.addLayer(poly);

        // Moving dot di atas jalur - lebih besar untuk ODP
        const dotRadius = cableType === 'odp-odp' ? 6 : 5;
        const dot = L.circleMarker(latlngs[0], { 
            radius: dotRadius, 
            color: dotColor, 
            fillColor: dotColor, 
            fillOpacity: 1, 
            weight: 2,
            pane: 'markerPane' 
        });
        cableLayerGroup.addLayer(dot);

        // Animasi dash offset (efek aliran pada garis)
        const startDashAnim = () => {
            const path = poly._path; // SVGPathElement
            if (!path) {
                // Elemen SVG mungkin belum siap; coba lagi segera
                const animId = cableType === 'odp-odp' ? 'odpDashAnimId' : 'dashAnimId';
                window[animId] = requestAnimationFrame(startDashAnim);
                return;
            }
            let offset = 0;
            const tick = () => {
                offset = (offset + 2) % 1000;
                path.style.strokeDashoffset = String(offset);
                const animId = cableType === 'odp-odp' ? 'odpDashAnimId' : 'dashAnimId';
                window[animId] = requestAnimationFrame(tick);
            };
            tick();
        };
        // Mulai setelah layer ter-render
        setTimeout(startDashAnim, 0);

        // Animasi titik bergerak dari A ke B berulang
        const from = latlngs[0];
        const to = latlngs[1];
        const durationMs = 4000;
        let startTs = null;
        const moveTick = (ts) => {
            if (!startTs) startTs = ts;
            const elapsed = ts - startTs;
            const t = Math.min(1, elapsed / durationMs);
            const lat = from.lat + (to.lat - from.lat) * t;
            const lng = from.lng + (to.lng - from.lng) * t;
            dot.setLatLng([lat, lng]);
            const animId = cableType === 'odp-odp' ? 'odpDotAnimId' : 'dotAnimId';
            if (t < 1) {
                window[animId] = requestAnimationFrame(moveTick);
            } else {
                // ulangi
                startTs = null;
                window[animId] = requestAnimationFrame(moveTick);
            }
        };
        const animId = cableType === 'odp-odp' ? 'odpDotAnimId' : 'dotAnimId';
        window[animId] = requestAnimationFrame(moveTick);
    }

    function createCustomIcon(devices) {
        // Check if any device is online
        const hasOnlineDevice = devices.some(d => d.status.isOnline);
        const deviceCount = devices.length;

        // Create improved ONU marker with icon
        let markerClass = `onu-marker ${hasOnlineDevice ? 'online' : 'offline'}`;
        if (hasOnlineDevice) {
            markerClass += ' pulse'; // Add pulsing animation for online devices
        }
        if (deviceCount > 1) {
            markerClass += ' cluster';
        }

        let markerHtml = `<div class="${markerClass}"><div class="icon-circle"></div>${deviceCount > 1 ? `<span class="cluster-badge">${deviceCount}</span>` : ''}</div>`;

        return L.divIcon({
            className: 'custom-marker',
            html: markerHtml,
            iconSize: deviceCount > 1 ? [50, 60] : [44, 54],
            iconAnchor: deviceCount > 1 ? [25, 60] : [22, 54]
        });
    }

    function createPopupContent(devices) {
        let content = '';

        devices.forEach((device, index) => {
            if (index > 0) content += '<hr style="margin: 8px 0;">';

            // Prepare WiFi info
            const ssid = device.wifi?.ssid || 'N/A';
            const rxPower = device.status.rxPower;
            const rxPowerColor = rxPower < -25 ? '#f44336' : rxPower < -20 ? '#ff9800' : '#4caf50';
            
            // Prepare tags info
            const tags = device.tags || [];
            const displayTags = tags.filter(tag => 
                !tag.startsWith('location:') && 
                !tag.startsWith('pppoe:') &&
                !tag.match(/^\d{10,15}$/) // Exclude phone numbers
            );
            const tagsDisplay = displayTags.length > 0 
                ? displayTags.map(tag => `<span style="background: #e3f2fd; color: #1976d2; padding: 2px 6px; border-radius: 3px; font-size: 11px; margin-right: 3px; display: inline-block; margin-bottom: 2px;">${tag}</span>`).join('')
                : '<span style="color: #999;">Tidak ada tag</span>';

            content += `
                <div style="padding: 8px; font-family: 'Segoe UI', sans-serif; font-size: 13px; max-width: 320px;" id="device-popup-${device.id}">
                    <h6 style="margin: 0 0 8px 0; color: #667eea; font-weight: 600; font-size: 14px; border-bottom: 2px solid #667eea; padding-bottom: 4px;">
                        <i class="bi bi-router me-1"></i>${device.serialNumber}
                        ${devices.length > 1 ? ` <span style="color: #999;">(${index + 1})</span>` : ''}
                    </h6>

                    <div style="margin-bottom: 6px;">
                        <span class="device-status ${device.status.isOnline ? 'status-online' : 'status-offline'}"></span>
                        <span style="color: ${device.status.statusText === 'Online' ? '#4caf50' : device.status.statusText === 'Idle' ? '#ff9800' : '#d32f2f'}; font-weight: 500;">
                            ${device.status.statusText || (device.status.isOnline ? 'Online' : 'Offline')}
                        </span>
                    </div>

                    <div style="background: #f8f9fa; padding: 6px; border-radius: 4px; margin-bottom: 6px;">
                        <div style="margin-bottom: 4px;">
                            <strong style="color: #555;"><i class="bi bi-person-circle" style="color: #2196f3;"></i> PPPoE User:</strong><br>
                            <span style="color: #333; font-family: monospace;">${device.pppoeUsername}</span>
                        </div>
                        
                        <div style="margin-bottom: 4px;" id="pppoe-status-${device.id}">
                            <strong style="color: #555;"><i class="bi bi-ethernet" style="color: #ff9800;"></i> PPPoE Status:</strong><br>
                            <span style="color: #999; font-size: 11px;">Memuat...</span>
                        </div>

                        <div style="margin-bottom: 4px;">
                            <strong style="color: #555;"><i class="bi bi-telephone" style="color: #4caf50;"></i> Pelanggan:</strong><br>
                            <span style="color: #333;">${device.customerPhone}</span>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 6px;">
                        <strong style="color: #555;"><i class="bi bi-wifi" style="color: #667eea;"></i> WiFi SSID:</strong><br>
                        <span style="color: #333;">${ssid}</span>
                    </div>

                    <div style="background: #f0f4ff; padding: 6px; border-radius: 4px; margin-bottom: 6px; border-left: 3px solid #667eea;">
                        <div style="margin-bottom: 4px;">
                            <strong style="color: #555; font-size: 12px;"><i class="bi bi-people-fill" style="color: #2196f3;"></i> User WiFi 2.4GHz:</strong>
                            <span style="color: #2196f3; font-weight: 700; background: #e3f2fd; padding: 2px 8px; border-radius: 3px; margin-left: 4px; font-size: 12px;">
                                ${device.wifi?.connectedUsers24 || 0} perangkat
                            </span>
                        </div>
                        <div>
                            <strong style="color: #555; font-size: 12px;"><i class="bi bi-people-fill" style="color: #9c27b0;"></i> User WiFi 5GHz:</strong>
                            <span style="color: #9c27b0; font-weight: 700; background: #f3e5f5; padding: 2px 8px; border-radius: 3px; margin-left: 4px; font-size: 12px;">
                                ${device.wifi?.connectedUsers5 || 0} perangkat
                            </span>
                        </div>
                        <div style="margin-top: 4px; padding-top: 4px; border-top: 1px solid #ddd;">
                            <strong style="color: #555; font-size: 11px;">Total:</strong>
                            <span style="color: #4caf50; font-weight: 700; font-size: 12px;">
                                ${(parseInt(device.wifi?.connectedUsers24 || 0) + parseInt(device.wifi?.connectedUsers5 || 0))} perangkat
                            </span>
                        </div>
                    </div>

                    ${rxPower ? `
                        <div style="margin-bottom: 6px;">
                            <strong style="color: #555;"><i class="bi bi-reception-4" style="color: ${rxPowerColor};"></i> Rx Power:</strong>
                            <span style="color: ${rxPowerColor}; font-weight: 500;">
                                ${rxPower} dBm
                            </span>
                        </div>
                    ` : ''}

                    <div style="margin-bottom: 8px;">
                        <strong style="color: #555;"><i class="bi bi-tags" style="color: #9c27b0;"></i> Tags:</strong><br>
                        <div style="margin-top: 4px;">
                            ${tagsDisplay}
                        </div>
                    </div>
                    
                    <!-- Edit SSID and Password Section -->
                    <div class="popup-edit-section">
                        <div>
                            <label><i class="bi bi-wifi"></i> Edit SSID:</label>
                            <div class="input-group">
                                <input type="text" id="ssid-input-${device.id}" value="${ssid}" 
                                       placeholder="New SSID">
                                <button class="ssid-button" onclick="updateSSID('${device.id}')">
                                    Simpan
                                </button>
                            </div>
                        </div>
                        
                        <div>
                            <label><i class="bi bi-key"></i> Edit Password:</label>
                            <div class="input-group">
                                <input type="text" id="password-input-${device.id}" 
                                       placeholder="New Password">
                                <button class="password-button" onclick="updatePassword('${device.id}')">
                                    Simpan
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Load PPPoE status asynchronously
            setTimeout(() => loadPPPoEStatus(device.pppoeUsername, device.id), 100);
        });

        return content;
    }

    // Function to load PPPoE connection status
    async function loadPPPoEStatus(pppoeUsername, deviceId) {
        const statusElement = document.getElementById(`pppoe-status-${deviceId}`);
        if (!statusElement) return;

        try {
            const response = await fetch(`/admin/mikrotik/pppoe-active`);
            const data = await response.json();
            
            if (data.success && Array.isArray(data.activeUsers)) {
                const pppoeUser = data.activeUsers.find(user => user.name === pppoeUsername);
                
                if (pppoeUser) {
                    const uptime = pppoeUser.uptime || 'N/A';
                    const address = pppoeUser.address || 'N/A';
                    
                    statusElement.innerHTML = `
                        <strong style="color: #555;"><i class="bi bi-ethernet" style="color: #4caf50;"></i> PPPoE Status:</strong><br>
                        <span style="color: #4caf50; font-weight: 500;">✓ Terkoneksi</span><br>
                        <span style="font-size: 11px; color: #666;">
                            <i class="bi bi-globe"></i> IP: <strong>${address}</strong><br>
                            <i class="bi bi-clock"></i> Uptime: ${uptime}
                        </span>
                    `;
                } else {
                    statusElement.innerHTML = `
                        <strong style="color: #555;"><i class="bi bi-ethernet" style="color: #f44336;"></i> PPPoE Status:</strong><br>
                        <span style="color: #f44336;">✗ Tidak terkoneksi</span>
                    `;
                }
            } else {
                statusElement.innerHTML = `
                    <strong style="color: #555;"><i class="bi bi-ethernet" style="color: #999;"></i> PPPoE Status:</strong><br>
                    <span style="color: #999; font-size: 11px;">Data tidak tersedia</span>
                `;
            }
        } catch (error) {
            console.error('Error loading PPPoE status:', error);
            statusElement.innerHTML = `
                <strong style="color: #555;"><i class="bi bi-ethernet" style="color: #999;"></i> PPPoE Status:</strong><br>
                <span style="color: #999; font-size: 11px;">Gagal memuat</span>
            `;
        }
    }

    function updateDeviceList(devices) {
        const deviceList = document.getElementById('deviceList');
        const deviceCountSmall = document.getElementById('deviceCountSmall');
        const loadingIndicator = document.getElementById('loadingIndicator');

        // Update count
        deviceCountSmall.textContent = `(${devices.length})`;

        // Remove loading indicator
        if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
        }

        // Clear existing content except loading indicator
        const existingContent = deviceList.querySelector('.device-list-content');
        if (existingContent) {
            existingContent.remove();
        }

        if (devices.length === 0) {
            const noDataHtml = `
                <div class="device-list-content">
                    <div class="text-center text-muted py-3">
                        <i class="bi bi-search fs-2 mb-2"></i>
                        <div>Tidak ada perangkat ditemukan</div>
                        <small class="text-muted">Coba ubah filter atau kata kunci pencarian</small>
                    </div>
                </div>
            `;
            deviceList.insertAdjacentHTML('beforeend', noDataHtml);
            return;
        }

        let html = '<div class="device-list-content">';
        devices.forEach(device => {
            const statusIcon = device.status.isOnline ? 'status-online' : 'status-offline';
            const statusText = device.status.isOnline ? 'Online' : 'Offline';
            const locationIcon = device.hasLocation
                ? '<i class="bi bi-geo-alt-fill text-success small ms-1" title="Dengan Lokasi"></i>'
                : '<i class="bi bi-geo-alt text-muted small ms-1" title="Tanpa Lokasi"></i>';

            html += `
                <div class="device-item" data-device-id="${device.id}" onclick="focusOnDevice('${device.id}')">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1 min-w-0">
                            <div class="fw-bold text-truncate">${device.serialNumber}</div>
                            <div class="text-muted small text-truncate">${device.pppoeUsername}</div>
                            <div class="text-muted small text-truncate">${device.customerPhone}</div>
                        </div>
                        <div class="text-end d-flex flex-column align-items-end">
                            <div class="d-flex align-items-center">
                                <span class="device-status ${statusIcon}"></span>
                                <small class="text-muted ms-1">${statusText}</small>
                            </div>
                            ${locationIcon}
                        </div>
                    </div>
                </div>
            `;
        });
        html += '</div>';

        deviceList.insertAdjacentHTML('beforeend', html);
    }

    function updateStatistics(summary) {
        // Update main statistics
        document.getElementById('totalDevices').textContent = summary.total;
        document.getElementById('onlineDevices').textContent = summary.online;
        document.getElementById('offlineDevices').textContent = summary.offline;
        document.getElementById('locatedDevices').textContent = summary.withLocation;

        // Update quick stats in control panel
        document.getElementById('quickTotal').textContent = summary.total;
        document.getElementById('quickOnline').textContent = summary.online;

        console.log(`📊 Statistics updated: ${summary.total} total, ${summary.online} online, ${summary.offline} offline, ${summary.withLocation} with location`);
    }

    function filterDevices() {
        console.log(`🔍 Filtering devices - Filter: ${currentFilter}, Search: "${currentSearch}"`);

        const filteredDevices = allDevices.filter(device => {
            // Status filter
            if (currentFilter === 'online' && !device.status.isOnline) return false;
            if (currentFilter === 'offline' && device.status.isOnline) return false;
            if (currentFilter === 'with-location' && !device.hasLocation) return false;

            // Search filter
            if (currentSearch) {
                const searchLower = currentSearch.toLowerCase();
                const searchableText = `${device.serialNumber} ${device.pppoeUsername} ${device.customerPhone}`.toLowerCase();
                if (!searchableText.includes(searchLower)) return false;
            }

            return true;
        });

        console.log(`📋 Filtered ${filteredDevices.length} from ${allDevices.length} devices`);

        displayDevicesOnMap(filteredDevices);
        updateDeviceList(filteredDevices);

        // Update filtered count in summary
        const filteredSummary = {
            total: allDevices.length,
            online: allDevices.filter(d => d.status.isOnline).length,
            offline: allDevices.filter(d => !d.status.isOnline).length,
            withLocation: allDevices.filter(d => d.hasLocation).length,
            filtered: filteredDevices.length
        };

        // Update device count small
        const deviceCountSmall = document.getElementById('deviceCountSmall');
        if (deviceCountSmall) {
            deviceCountSmall.textContent = `(${filteredSummary.filtered})`;
        }
    }

    function focusOnDevice(deviceId) {
        const device = allDevices.find(d => d.id === deviceId);
        if (device && device.hasLocation) {
            map.setView([device.location.lat, device.location.lng], 15);
            highlightDeviceInList(deviceId);
        }
    }

    function highlightDeviceInList(deviceId) {
        // Remove active class from all items
        document.querySelectorAll('.device-item').forEach(item => {
            item.classList.remove('active');
        });

        // Add active class to selected item
        const selectedItem = document.querySelector(`[data-device-id="${deviceId}"]`);
        if (selectedItem) {
            selectedItem.classList.add('active');
            selectedItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }

    function showLoading(show) {
        const overlay = document.getElementById('loadingOverlay');
        const loadingIndicator = document.getElementById('loadingIndicator');

        if (show) {
            overlay.classList.remove('d-none');
            // Show loading in device list
            loadingIndicator.innerHTML = `
                <div class="text-center text-muted py-4">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="d-inline">Memuat data perangkat...</div>
                </div>
            `;
        } else {
            overlay.classList.add('d-none');
        }
    }

    // Global functions for popup buttons
    window.viewDeviceDetails = function(deviceId) {
        // Open device details in new window/tab
        window.open(`/admin/genieacs/device/${deviceId}`, '_blank');
    };


    // Handle window resize
    window.addEventListener('resize', function() {
        if (map) {
            setTimeout(() => {
                map.invalidateSize();
            }, 100);
        }
    });

    // Auto refresh every 5 minutes
    setInterval(() => {
        loadMapData();
    }, 5 * 60 * 1000);
    
    // Toggle control panel visibility
    function toggleControlPanel() {
        const controlPanel = document.getElementById('controlPanelContainer');
        const mapContainer = document.getElementById('mapContainer');
        const showButton = document.getElementById('showControlPanelBtn');
        
        if (controlPanel.style.display === 'none') {
            // Show control panel
            controlPanel.style.display = 'block';
            mapContainer.className = 'col-12 col-lg-8';
            showButton.style.display = 'none';
        } else {
            // Hide control panel
            controlPanel.style.display = 'none';
            mapContainer.className = 'col-12';
            showButton.style.display = 'block';
        }
        
        // Trigger map resize
        if (map) {
            setTimeout(() => {
                map.invalidateSize();
            }, 100);
        }
    }
    
    // Setup toggle button event listeners (script placed after DOM, safe to bind now)
    (function() {
        const toggleButton = document.getElementById('toggleControlPanel');
        const showButton = document.getElementById('showControlPanelBtn');
        if (toggleButton) toggleButton.addEventListener('click', toggleControlPanel);
        if (showButton) showButton.addEventListener('click', toggleControlPanel);
    })();
</script>
</body>
</html>
