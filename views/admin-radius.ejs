<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <title>RADIUS Server Management - Admin</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <link href="/css/responsive-admin.css" rel="stylesheet">
    <link href="/css/dark-theme.css" rel="stylesheet">
    <link href="/css/widgets.css" rel="stylesheet">
    <link href="/css/theme-unify.css" rel="stylesheet">
    <style>
        /* Dark Theme */
        body { 
            background: #1a1d29 !important;
            color: #e0e0e0;
        }
        
        .main-content {
            background: #1a1d29;
        }
        
        /* Mobile responsive fixes */
        @media (max-width: 767.98px) {
            .main-content {
                margin-top: 70px !important;
                padding-top: 10px !important;
                z-index: 1;
            }
        }
        
        /* Card Dark Theme */
        .card {
            background: #252a3d !important;
            border: 1px solid #3a4052;
            color: #e0e0e0;
        }
        
        .card-header {
            background: #2d3348 !important;
            border-bottom: 1px solid #3a4052;
            color: #e0e0e0;
        }
        
        .card-body {
            color: #e0e0e0;
        }
        
        /* Text Colors */
        h2, h3, h4, h5, h6 {
            color: #ffffff !important;
        }
        
        p, span, label, .text-muted {
            color: #b8b8b8 !important;
        }
        
        strong {
            color: #e0e0e0;
        }
        
        /* Table Dark Theme */
        .table {
            color: #e0e0e0 !important;
            border-color: #3a4052;
        }
        
        .table thead th {
            background: #2d3348;
            border-color: #3a4052;
            color: #ffffff !important;
        }
        
        .table tbody tr {
            background: #252a3d;
            border-color: #3a4052;
        }
        
        .table tbody tr:hover {
            background: #2d3348;
        }
        
        .table td, .table th {
            border-color: #3a4052;
        }
        
        /* Status Badge */
        .status-badge {
            font-size: 0.9rem;
            padding: 0.5rem 1rem;
        }
        
        /* Using global stats-card styles from /css/widgets.css */
        
        /* Buttons */
        .action-btn {
            min-width: 120px;
        }
        
        .btn-primary {
            background: #4a5fc1;
            border-color: #4a5fc1;
        }
        
        .btn-primary:hover {
            background: #5a6fd1;
            border-color: #5a6fd1;
        }
        
        /* Session Table */
        .session-table {
            font-size: 0.9rem;
        }
        
        .session-table code {
            background: #1a1d29;
            color: #a3d5ff;
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
        }
        
        /* Loading Spinner */
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 2rem;
            color: #b8b8b8;
        }
        
        /* Badges */
        .badge.bg-success {
            background: #28a745 !important;
        }
        
        .badge.bg-danger {
            background: #dc3545 !important;
        }
        
        .badge.bg-warning {
            background: #ffc107 !important;
            color: #000 !important;
        }
        
        .badge.bg-secondary {
            background: #6c757d !important;
        }
        
        .badge.bg-primary {
            background: #4a5fc1 !important;
        }
        
        /* Alert */
        .alert {
            border: 1px solid #3a4052;
        }
        
        .alert-success {
            background: #1e4620;
            border-color: #28a745;
            color: #7ae582;
        }
        
        .alert-danger {
            background: #4a1f1f;
            border-color: #dc3545;
            color: #f8a5a5;
        }
        
        .alert-info {
            background: #1a3644;
            border-color: #17a2b8;
            color: #7dcfe2;
        }
        
        .alert-warning {
            background: #4a3f1a;
            border-color: #ffc107;
            color: #ffe17a;
        }
    </style>
</head>
<body>
<div class="container-fluid">
    <div class="row">
        <!-- Include Responsive Admin Sidebar -->
        <%- include('partials/admin-responsive-sidebar', { page: 'radius', settings: settings }) %>
        
        <main class="col-md-10 ms-sm-auto main-content">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-shield-lock"></i> RADIUS Server Management</h2>
                <button class="btn btn-primary" onclick="refreshData()">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                </button>
            </div>

            <!-- Alert Messages -->
            <div id="alertContainer"></div>

            <!-- Server Status Card -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-server"></i> Server Status</h5>
                    <span id="serverStatusBadge" class="badge bg-secondary">Loading...</span>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Authentication Server:</strong> <span id="authServerStatus">-</span></p>
                            <p><strong>Auth Port:</strong> <span id="authPort">-</span></p>
                            <p><strong>Auth Requests:</strong> <span id="authRequests">-</span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Accounting Server:</strong> <span id="acctServerStatus">-</span></p>
                            <p><strong>Acct Port:</strong> <span id="acctPort">-</span></p>
                            <p><strong>Acct Requests:</strong> <span id="acctRequests">-</span></p>
                        </div>
                    </div>
                    <hr>
                    <div class="d-flex gap-2 flex-wrap">
                        <button class="btn btn-success action-btn" onclick="startServer()" id="startBtn">
                            <i class="bi bi-play-fill"></i> Start
                        </button>
                        <button class="btn btn-warning action-btn" onclick="restartServer()" id="restartBtn">
                            <i class="bi bi-arrow-clockwise"></i> Restart
                        </button>
                        <button class="btn btn-danger action-btn" onclick="stopServer()" id="stopBtn">
                            <i class="bi bi-stop-fill"></i> Stop
                        </button>
                        <button class="btn btn-info action-btn" onclick="syncCustomers()" id="syncBtn">
                            <i class="bi bi-arrow-repeat"></i> Sync Customers
                        </button>
                        <button class="btn btn-info action-btn" onclick="syncPackages()" id="syncPackagesBtn">
                            <i class="bi bi-box-seam"></i> Sync Packages
                        </button>
                        <button class="btn btn-secondary action-btn" onclick="reloadNas()" id="reloadNasBtn">
                            <i class="bi bi-arrow-clockwise"></i> Reload NAS
                        </button>
                    </div>
                </div>
            </div>

            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3 mb-3">
                    <div class="card stats-card radius-users">
                        <div class="card-body text-center">
                            <i class="bi bi-people-fill fs-2 mb-2"></i>
                            <h6 class="text-muted">Total Users</h6>
                            <h3 id="totalUsers" class="mb-0">-</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card stats-card radius-active">
                        <div class="card-body text-center">
                            <i class="bi bi-wifi fs-2 mb-2"></i>
                            <h6 class="text-muted">Active Sessions</h6>
                            <h3 id="activeSessions" class="mb-0">-</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card stats-card success">
                        <div class="card-body text-center">
                            <i class="bi bi-check-circle-fill fs-2 mb-2"></i>
                            <h6 class="text-muted">Auth Success</h6>
                            <h3 id="authSuccess" class="mb-0">-</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card stats-card danger">
                        <div class="card-body text-center">
                            <i class="bi bi-x-circle-fill fs-2 mb-2"></i>
                            <h6 class="text-muted">Auth Rejected</h6>
                            <h3 id="authRejected" class="mb-0">-</h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sync Status -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-arrow-repeat"></i> Sync Status</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <p><strong>Total Customers:</strong> <span id="totalCustomers">-</span></p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Synced:</strong> <span id="syncedCustomers" class="text-success">-</span></p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Last Sync:</strong> <span id="lastSync">-</span></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Active Sessions Table -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-list-ul"></i> Active Sessions</h5>
                    <span class="badge bg-primary" id="sessionCount">0</span>
                </div>
                <div class="card-body">
                    <div class="loading-spinner" id="loadingSpinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading sessions...</p>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover session-table">
                            <thead>
                                <tr>
                                    <th>Username</th>
                                    <th>Session ID</th>
                                    <th>IP Address</th>
                                    <th>NAS IP</th>
                                    <th>Start Time</th>
                                    <th>Duration</th>
                                    <th>Input (MB)</th>
                                    <th>Output (MB)</th>
                                </tr>
                            </thead>
                            <tbody id="sessionsTableBody">
                                <tr>
                                    <td colspan="8" class="text-center text-muted">No active sessions</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- NAS Clients Table -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-hdd-network"></i> NAS Clients</h5>
                    <button class="btn btn-sm btn-success" onclick="openAddNasModal()">
                        <i class="bi bi-plus-circle"></i> Add NAS
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover session-table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>IP Address</th>
                                    <th>Secret</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="nasClientsTableBody">
                                <tr>
                                    <td colspan="4" class="text-center text-muted">Loading NAS clients...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- RADIUS Users Table -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-person-lines-fill"></i> RADIUS Users</h5>
                    <button class="btn btn-sm btn-primary" onclick="loadUsers()">
                        <i class="bi bi-arrow-clockwise"></i> Reload
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover session-table">
                            <thead>
                                <tr>
                                    <th>Username</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Updated</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="usersTableBody">
                                <tr>
                                    <td colspan="5" class="text-center text-muted">Loading users...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </main>
    </div>
</div>

<!-- Add/Edit NAS Client Modal -->
<div class="modal fade" id="nasClientModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content" style="background: #252a3d; color: #e0e0e0;">
            <div class="modal-header" style="border-bottom: 1px solid #3a4052;">
                <h5 class="modal-title" id="nasClientModalTitle">Add NAS Client</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="nasClientId" value="">
                <div class="mb-3">
                    <label for="nasClientShortname" class="form-label">Name</label>
                    <input type="text" class="form-control" id="nasClientShortname" required style="background: #1a1d29; border: 1px solid #3a4052; color: #e0e0e0;">
                </div>
                <div class="mb-3">
                    <label for="nasClientNasname" class="form-label">IP Address (NAS Name)</label>
                    <input type="text" class="form-control" id="nasClientNasname" required placeholder="192.168.1.1" style="background: #1a1d29; border: 1px solid #3a4052; color: #e0e0e0;">
                    <small class="text-muted">IP address of the NAS device</small>
                </div>
                <div class="mb-3">
                    <label for="nasClientSecret" class="form-label">Secret</label>
                    <input type="text" class="form-control" id="nasClientSecret" required style="background: #1a1d29; border: 1px solid #3a4052; color: #e0e0e0;">
                    <small class="text-muted">Shared secret for RADIUS authentication</small>
                </div>
                <div class="mb-3">
                    <label for="nasClientType" class="form-label">Type</label>
                    <select class="form-select" id="nasClientType" style="background: #1a1d29; border: 1px solid #3a4052; color: #e0e0e0;">
                        <option value="other">Other</option>
                        <option value="mikrotik">MikroTik</option>
                        <option value="cisco">Cisco</option>
                        <option value="juniper">Juniper</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="nasClientDescription" class="form-label">Description</label>
                    <textarea class="form-control" id="nasClientDescription" rows="2" style="background: #1a1d29; border: 1px solid #3a4052; color: #e0e0e0;"></textarea>
                </div>
            </div>
            <div class="modal-footer" style="border-top: 1px solid #3a4052;">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveNasClient()">Save</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/responsive-admin.js"></script>
<script>
let autoRefreshInterval;
let nasClientModal;

// Show alert message
function showAlert(message, type = 'info') {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    document.getElementById('alertContainer').innerHTML = alertHtml;
    setTimeout(() => {
        const alert = document.querySelector('.alert');
        if (alert) alert.remove();
    }, 5000);
}

// Format bytes to MB
function formatBytes(bytes) {
    return (bytes / (1024 * 1024)).toFixed(2);
}

// Format duration
function formatDuration(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}h ${minutes}m ${secs}s`;
}

// Format date
function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    return date.toLocaleString('id-ID');
}

// Load server status
async function loadStatus() {
    try {
        const response = await fetch('/admin/radius/status');
        const data = await response.json();
        
        if (data.success) {
            // Update server status
            const isRunning = data.server.authServer && data.server.acctServer;
            document.getElementById('serverStatusBadge').textContent = isRunning ? 'Running' : 'Stopped';
            document.getElementById('serverStatusBadge').className = `badge bg-${isRunning ? 'success' : 'danger'}`;
            
            document.getElementById('authServerStatus').innerHTML = data.server.authServer 
                ? '<span class="badge bg-success">Running</span>' 
                : '<span class="badge bg-danger">Stopped</span>';
            document.getElementById('acctServerStatus').innerHTML = data.server.acctServer 
                ? '<span class="badge bg-success">Running</span>' 
                : '<span class="badge bg-danger">Stopped</span>';
            
            document.getElementById('authPort').textContent = data.server.ports.auth || '-';
            document.getElementById('acctPort').textContent = data.server.ports.acct || '-';
            document.getElementById('authRequests').textContent = data.server.stats.authRequests || 0;
            document.getElementById('acctRequests').textContent = data.server.stats.acctRequests || 0;
            
            // Update statistics
            document.getElementById('totalUsers').textContent = data.sync.total || 0;
            document.getElementById('activeSessions').textContent = data.activeSessions || 0;
            document.getElementById('authSuccess').textContent = data.server.stats.authAccepted || 0;
            document.getElementById('authRejected').textContent = data.server.stats.authRejected || 0;
            
            // Update sync status
            document.getElementById('totalCustomers').textContent = data.sync.total || 0;
            document.getElementById('syncedCustomers').textContent = data.sync.synced || 0;
            document.getElementById('lastSync').textContent = formatDate(data.sync.lastSync);
            
            // Update sessions table
            updateSessionsTable(data.sessions || []);
            
            // Load NAS clients separately
            await loadNasClients();
        }
    } catch (error) {
        console.error('Error loading status:', error);
        showAlert('Error loading server status', 'danger');
    }
}

// Update NAS Clients table
function updateNasClientsTable(nasClients) {
    const tbody = document.getElementById('nasClientsTableBody');
    
    if (nasClients.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">No NAS clients configured</td></tr>';
        return;
    }
    
    tbody.innerHTML = nasClients.map(nas => {
        // Escape HTML untuk keamanan
        const shortname = escapeHtml(nas.shortname || 'Unnamed');
        const nasname = escapeHtml(nas.nasname);
        const secretMask = '*'.repeat(nas.secret ? nas.secret.length : 0);
        
        // Serialize object untuk onclick handler
        const nasJson = JSON.stringify(nas).replace(/"/g, '&quot;');
        
        return `
            <tr data-nas-id="${nas.id}">
                <td><strong>${shortname}</strong></td>
                <td><code>${nasname}</code></td>
                <td><code>${secretMask}</code></td>
                <td>
                    <button class="btn btn-sm btn-warning" onclick='editNasClient(${nasJson})' title="Edit ${shortname}">
                        <i class="bi bi-pencil"></i> Edit
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteNasClient(${nas.id})" title="Delete ${shortname}">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </td>
            </tr>
        `;
    }).join('');
}

// Helper function to escape HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Load NAS clients
async function loadNasClients() {
    try {
        const response = await fetch('/admin/radius/nas-clients');
        const data = await response.json();
        
        if (data.success) {
            updateNasClientsTable(data.nasClients || []);
        }
    } catch (error) {
        console.error('Error loading NAS clients:', error);
    }
}

// Update sessions table
function updateSessionsTable(sessions) {
    const tbody = document.getElementById('sessionsTableBody');
    document.getElementById('sessionCount').textContent = sessions.length;
    
    if (sessions.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center text-muted">No active sessions</td></tr>';
        return;
    }
    
    tbody.innerHTML = sessions.map(session => `
        <tr>
            <td><strong>${session.username}</strong></td>
            <td><code>${session.acctSessionId || '-'}</code></td>
            <td>${session.framedIpAddress || '-'}</td>
            <td>${session.nasIpAddress || '-'}</td>
            <td>${formatDate(session.acctStartTime)}</td>
            <td>${session.acctSessionTime ? formatDuration(session.acctSessionTime) : '-'}</td>
            <td>${session.acctInputOctets ? formatBytes(session.acctInputOctets) : '0'}</td>
            <td>${session.acctOutputOctets ? formatBytes(session.acctOutputOctets) : '0'}</td>
        </tr>
    `).join('');
}

// Load users list
async function loadUsers() {
    try {
        const response = await fetch('/admin/radius/users');
        const data = await response.json();
        
        if (data.success) {
            const tbody = document.getElementById('usersTableBody');
            
            if (data.users.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">No users found</td></tr>';
                return;
            }
            
            tbody.innerHTML = data.users.map(user => `
                <tr>
                    <td><strong>${user.username}</strong></td>
                    <td>
                        <span class="badge bg-${user.enabled ? 'success' : 'secondary'}">
                            ${user.enabled ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                    <td>${formatDate(user.created_at)}</td>
                    <td>${formatDate(user.updated_at)}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="syncUser('${user.username}')">
                            <i class="bi bi-arrow-repeat"></i> Sync
                        </button>
                    </td>
                </tr>
            `).join('');
        }
    } catch (error) {
        console.error('Error loading users:', error);
        showAlert('Error loading users list', 'danger');
    }
}

// Start server
async function startServer() {
    try {
        const response = await fetch('/admin/radius/start', { method: 'POST' });
        const data = await response.json();
        
        if (data.success) {
            showAlert('RADIUS server started successfully', 'success');
            await loadStatus();
        } else {
            showAlert(data.error || 'Failed to start server', 'danger');
        }
    } catch (error) {
        showAlert('Error starting server: ' + error.message, 'danger');
    }
}

// Stop server
async function stopServer() {
    if (!confirm('Are you sure you want to stop the RADIUS server?')) return;
    
    try {
        const response = await fetch('/admin/radius/stop', { method: 'POST' });
        const data = await response.json();
        
        if (data.success) {
            showAlert('RADIUS server stopped', 'warning');
            await loadStatus();
        } else {
            showAlert(data.error || 'Failed to stop server', 'danger');
        }
    } catch (error) {
        showAlert('Error stopping server: ' + error.message, 'danger');
    }
}

// Restart server
async function restartServer() {
    try {
        const response = await fetch('/admin/radius/restart', { method: 'POST' });
        const data = await response.json();
        
        if (data.success) {
            showAlert('RADIUS server restarted successfully', 'success');
            await loadStatus();
        } else {
            showAlert(data.error || 'Failed to restart server', 'danger');
        }
    } catch (error) {
        showAlert('Error restarting server: ' + error.message, 'danger');
    }
}

// Sync all customers
async function syncCustomers() {
    document.getElementById('syncBtn').disabled = true;
    document.getElementById('syncBtn').innerHTML = '<i class="bi bi-hourglass-split"></i> Syncing...';
    
    try {
        const response = await fetch('/admin/radius/sync', { method: 'POST' });
        const data = await response.json();
        
        if (data.success) {
            showAlert(data.message, 'success');
            await loadStatus();
            await loadUsers();
        } else {
            showAlert(data.error || 'Sync failed', 'danger');
        }
    } catch (error) {
        showAlert('Error syncing customers: ' + error.message, 'danger');
    } finally {
        document.getElementById('syncBtn').disabled = false;
        document.getElementById('syncBtn').innerHTML = '<i class="bi bi-arrow-repeat"></i> Sync Customers';
    }
}

// Sync all packages
async function syncPackages() {
    document.getElementById('syncPackagesBtn').disabled = true;
    document.getElementById('syncPackagesBtn').innerHTML = '<i class="bi bi-hourglass-split"></i> Syncing...';
    
    try {
        const response = await fetch('/admin/radius/sync-packages', { method: 'POST' });
        const data = await response.json();
        
        if (data.success) {
            showAlert(`Packages sync completed: ${data.result.synced} synced, ${data.result.errors} errors`, 'success');
            await loadStatus();
        } else {
            showAlert(data.error || 'Package sync failed', 'danger');
        }
    } catch (error) {
        showAlert('Error syncing packages: ' + error.message, 'danger');
    } finally {
        document.getElementById('syncPackagesBtn').disabled = false;
        document.getElementById('syncPackagesBtn').innerHTML = '<i class="bi bi-box-seam"></i> Sync Packages';
    }
}

// Reload NAS clients
async function reloadNas() {
    const btn = document.getElementById('reloadNasBtn');
    if (!btn) return;
    btn.disabled = true;
    const original = btn.innerHTML;
    btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Reloading...';
    try {
        const resp = await fetch('/admin/radius/reload-nas', { method: 'POST' });
        const data = await resp.json();
        if (data.success) {
            showAlert('NAS clients reloaded successfully', 'success');
            await loadStatus();
        } else {
            showAlert(data.error || 'Failed to reload NAS clients', 'danger');
        }
    } catch (e) {
        showAlert('Error reloading NAS clients: ' + e.message, 'danger');
    } finally {
        btn.disabled = false;
        btn.innerHTML = original;
    }
}

// Sync single user
async function syncUser(username) {
    try {
        const response = await fetch(`/admin/radius/user/${username}/sync`, { method: 'POST' });
        const data = await response.json();
        
        if (data.success) {
            showAlert(`User ${username} synced successfully`, 'success');
            await loadStatus();
            await loadUsers();
        } else {
            showAlert(data.error || 'Sync failed', 'danger');
        }
    } catch (error) {
        showAlert('Error syncing user: ' + error.message, 'danger');
    }
}

// Open add NAS client modal
function openAddNasModal() {
    document.getElementById('nasClientModalTitle').textContent = 'Add NAS Client';
    document.getElementById('nasClientId').value = '';
    document.getElementById('nasClientShortname').value = '';
    document.getElementById('nasClientNasname').value = '';
    document.getElementById('nasClientSecret').value = '';
    document.getElementById('nasClientType').value = 'other';
    document.getElementById('nasClientDescription').value = '';
    
    if (!nasClientModal) {
        nasClientModal = new bootstrap.Modal(document.getElementById('nasClientModal'));
    }
    nasClientModal.show();
}

// Edit NAS client
async function editNasClient(nasClient) {
    document.getElementById('nasClientModalTitle').textContent = 'Edit NAS Client';
    document.getElementById('nasClientId').value = nasClient.id || '';
    document.getElementById('nasClientShortname').value = nasClient.shortname || '';
    document.getElementById('nasClientNasname').value = nasClient.nasname || '';
    document.getElementById('nasClientSecret').value = nasClient.secret || '';
    document.getElementById('nasClientType').value = nasClient.type || 'other';
    document.getElementById('nasClientDescription').value = nasClient.description || '';
    
    if (!nasClientModal) {
        nasClientModal = new bootstrap.Modal(document.getElementById('nasClientModal'));
    }
    nasClientModal.show();
}

// Save NAS client
async function saveNasClient() {
    const id = document.getElementById('nasClientId').value;
    const shortname = document.getElementById('nasClientShortname').value.trim();
    const nasname = document.getElementById('nasClientNasname').value.trim();
    const secret = document.getElementById('nasClientSecret').value.trim();
    const type = document.getElementById('nasClientType').value;
    const description = document.getElementById('nasClientDescription').value.trim();
    
    if (!shortname || !nasname || !secret) {
        showAlert('Name, IP Address, and Secret are required', 'warning');
        return;
    }
    
    try {
        const payload = { 
            nasname, 
            shortname, 
            secret, 
            type, 
            description 
        };
        
        let response;
        if (id) {
            // Update existing
            response = await fetch(`/admin/radius/nas-clients/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
        } else {
            // Add new
            response = await fetch('/admin/radius/nas-clients', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
        }
        
        const data = await response.json();
        
        if (data.success) {
            showAlert('NAS client saved successfully', 'success');
            nasClientModal.hide();
            await loadNasClients();
        } else {
            showAlert(data.error || 'Failed to save NAS client', 'danger');
        }
    } catch (error) {
        showAlert('Error saving NAS client: ' + error.message, 'danger');
    }
}

// Delete NAS client
async function deleteNasClient(id) {
    console.log('deleteNasClient called with id:', id);
    
    if (!id) {
        console.error('No ID provided to deleteNasClient');
        showAlert('Invalid NAS client ID', 'danger');
        return;
    }
    
    // Get current count to show appropriate warning
    let warningMessage = 'Are you sure you want to delete this NAS client?';
    let nasCount = 0;
    
    try {
        const response = await fetch('/admin/radius/nas-clients');
        const data = await response.json();
        console.log('Current NAS clients:', data);
        
        if (data.success && data.nasClients) {
            nasCount = data.nasClients.length;
            if (nasCount <= 1) {
                warningMessage = 'WARNING: This is your ONLY NAS client!\n\n' +
                               'Deleting it will prevent RADIUS server from accepting any connections.\n\n' +
                               'Are you ABSOLUTELY SURE you want to delete it?';
            }
        }
    } catch (e) {
        console.error('Error checking NAS count:', e);
    }
    
    console.log('Showing confirmation dialog:', warningMessage);
    const userConfirmed = confirm(warningMessage);
    console.log('User confirmation:', userConfirmed);
    
    if (!userConfirmed) {
        console.log('User cancelled delete operation');
        return;
    }
    
    console.log('Proceeding with delete, calling API...');
    
    try {
        const response = await fetch(`/admin/radius/nas-clients/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        console.log('Delete API response status:', response.status);
        const data = await response.json();
        console.log('Delete API response data:', data);
        
        if (data.success) {
            showAlert(data.message || 'NAS client deleted successfully', 'success');
            console.log('Delete successful, reloading NAS clients...');
            await loadNasClients();
        } else {
            console.error('Delete failed:', data.error);
            showAlert(data.error || 'Failed to delete NAS client', 'danger');
        }
    } catch (error) {
        console.error('Delete NAS client error:', error);
        showAlert('Error deleting NAS client: ' + error.message, 'danger');
    }
}

// Refresh all data
async function refreshData() {
    await loadStatus();
    await loadUsers();
    await loadNasClients();
}

// Initialize page
document.addEventListener('DOMContentLoaded', async () => {
    await refreshData();
    
    // Auto-refresh every 5 seconds
    autoRefreshInterval = setInterval(loadStatus, 5000);
});

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
    }
});
</script>
</body>
</html>
